#!/usr/bin/env python3
"""
Enhanced Vulnerability Processor with MASVS Integration

This module provides comprehensive vulnerability processing that automatically applies
MASVS controls and compliance mappings during vulnerability creation and processing.
"""

import logging
import time
from typing import Dict, List, Any, Optional, Set
from collections import defaultdict
from datetime import datetime

from core.masvs_tagging_service import MASVSTaggingService, apply_masvs_tagging_to_report
from core.masvs_compliance_analyzer import MASVSComplianceAnalyzer
from core.shared_data_structures.base_vulnerability import BaseVulnerability

logger = logging.getLogger(__name__)

class EnhancedVulnerabilityProcessor:
    """
    Enhanced vulnerability processor with automatic MASVS integration.
    
    This processor automatically applies MASVS controls to vulnerabilities
    during creation and ensures compliance tracking throughout the pipeline.
    """
    
    def __init__(self, config: Dict[str, Any] = None):
        """Initialize the enhanced vulnerability processor."""
        self.config = config or {}
        self.masvs_tagging_service = MASVSTaggingService()
        self.masvs_analyzer = MASVSComplianceAnalyzer()
        
        # Processing statistics
        self.stats = {
            "total_processed": 0,
            "masvs_tagged": 0,
            "compliance_analyzed": 0,
            "enhanced_vulnerabilities": 0,
            "processing_errors": 0
        }
        
        # Performance tracking
        self.processing_times = {
            "masvs_tagging": 0.0,
            "compliance_analysis": 0.0,
            "enhancement": 0.0,
            "total": 0.0
        }
        
        logger.info("Enhanced Vulnerability Processor initialized with MASVS integration")
    
    def process_vulnerabilities(self, vulnerabilities: List[Dict[str, Any]], 
                              context: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        Process vulnerabilities with comprehensive MASVS integration.
        
        Args:
            vulnerabilities: List of vulnerability findings
            context: Processing context information
            
        Returns:
            Enhanced processing results with MASVS compliance
        """
        start_time = time.time()
        context = context or {}
        
        logger.info(f"🔄 Processing {len(vulnerabilities)} vulnerabilities with MASVS integration...")
        
        try:
            # Stage 1: Apply MASVS tagging to all vulnerabilities
            tagged_vulnerabilities = self._apply_masvs_tagging(vulnerabilities)
            
            # Stage 2: Enhance vulnerabilities with additional context
            enhanced_vulnerabilities = self._enhance_vulnerabilities(tagged_vulnerabilities, context)
            
            # Stage 3: Perform MASVS compliance analysis
            compliance_analysis = self._perform_compliance_analysis(enhanced_vulnerabilities)
            
            # Stage 4: Generate comprehensive results
            results = self._generate_processing_results(
                enhanced_vulnerabilities, compliance_analysis, context
            )
            
            # Update processing statistics
            self.processing_times["total"] = time.time() - start_time
            self._update_statistics(len(vulnerabilities), len(enhanced_vulnerabilities))
            
            logger.info(f"✅ Vulnerability processing complete in {self.processing_times['total']:.2f}s")
            logger.info(f"   MASVS tagged: {self.stats['masvs_tagged']}")
            logger.info(f"   Enhanced: {self.stats['enhanced_vulnerabilities']}")
            
            return results
            
        except Exception as e:
            logger.error(f"❌ Vulnerability processing failed: {e}")
            self.stats["processing_errors"] += 1
            return self._generate_error_results(vulnerabilities, str(e))
    
    def _apply_masvs_tagging(self, vulnerabilities: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Apply MASVS tagging to vulnerabilities."""
        start_time = time.time()
        
        logger.debug("Applying MASVS tagging to vulnerabilities...")
        
        try:
            tagged_vulnerabilities = self.masvs_tagging_service.apply_masvs_tags(vulnerabilities)
            
            self.processing_times["masvs_tagging"] = time.time() - start_time
            self.stats["masvs_tagged"] = len([v for v in tagged_vulnerabilities 
                                            if v.get("masvs_controls")])
            
            logger.debug(f"MASVS tagging completed in {self.processing_times['masvs_tagging']:.2f}s")
            return tagged_vulnerabilities
            
        except Exception as e:
            logger.error(f"MASVS tagging failed: {e}")
            return vulnerabilities
    
    def _enhance_vulnerabilities(self, vulnerabilities: List[Dict[str, Any]], 
                               context: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Enhance vulnerabilities with additional context and metadata."""
        start_time = time.time()
        
        logger.debug("Enhancing vulnerabilities with additional context...")
        
        enhanced_vulnerabilities = []
        
        for vuln in vulnerabilities:
            try:
                enhanced_vuln = self._enhance_single_vulnerability(vuln, context)
                enhanced_vulnerabilities.append(enhanced_vuln)
                
            except Exception as e:
                logger.warning(f"Failed to enhance vulnerability {vuln.get('id', 'unknown')}: {e}")
                enhanced_vulnerabilities.append(vuln)
        
        self.processing_times["enhancement"] = time.time() - start_time
        self.stats["enhanced_vulnerabilities"] = len(enhanced_vulnerabilities)
        
        logger.debug(f"Vulnerability enhancement completed in {self.processing_times['enhancement']:.2f}s")
        return enhanced_vulnerabilities
    
    def _enhance_single_vulnerability(self, vulnerability: Dict[str, Any], 
                                    context: Dict[str, Any]) -> Dict[str, Any]:
        """Enhance a single vulnerability with additional metadata."""
        enhanced_vuln = vulnerability.copy()
        
        # Add processing metadata
        enhanced_vuln["processing_metadata"] = {
            "processed_at": datetime.now().isoformat(),
            "processor_version": "1.0.0",
            "masvs_integrated": bool(enhanced_vuln.get("masvs_controls")),
            "enhancement_applied": True
        }
        
        # Enhance MASVS information if available
        if enhanced_vuln.get("masvs_controls"):
            enhanced_vuln["masvs_metadata"] = self._create_masvs_metadata(enhanced_vuln)
        
        # Add context-specific enhancements
        if context.get("apk_info"):
            enhanced_vuln["apk_context"] = {
                "package_name": context["apk_info"].get("package_name", "unknown"),
                "target_sdk": context["apk_info"].get("target_sdk", "unknown"),
                "min_sdk": context["apk_info"].get("min_sdk", "unknown")
            }
        
        # Calculate risk score based on MASVS controls
        enhanced_vuln["risk_assessment"] = self._calculate_risk_assessment(enhanced_vuln)
        
        return enhanced_vuln
    
    def _create_masvs_metadata(self, vulnerability: Dict[str, Any]) -> Dict[str, Any]:
        """Create comprehensive MASVS metadata for a vulnerability."""
        masvs_controls = vulnerability.get("masvs_controls", [])
        
        if not masvs_controls:
            return {}
        
        # Analyze controls
        categories = set()
        control_levels = set()
        
        for control in masvs_controls:
            if "-" in control:
                category = control.split("-")[1]
                categories.add(category)
                
                # Determine control level (simplified mapping)
                if category in ["STORAGE", "CRYPTO", "AUTH"]:
                    control_levels.add("L1")  # Level 1 requirements
                elif category in ["NETWORK", "PLATFORM", "CODE"]:
                    control_levels.add("L2")  # Level 2 requirements
                elif category in ["RESILIENCE", "PRIVACY"]:
                    control_levels.add("R")   # Resilience requirements
        
        return {
            "controls_count": len(masvs_controls),
            "categories": sorted(list(categories)),
            "control_levels": sorted(list(control_levels)),
            "primary_category": vulnerability.get("masvs_category", "GENERAL"),
            "mstg_refs": vulnerability.get("mstg_refs", [])
        }
    
    def _calculate_risk_assessment(self, vulnerability: Dict[str, Any]) -> Dict[str, Any]:
        """Calculate comprehensive risk assessment for a vulnerability."""
        severity = vulnerability.get("severity", "MEDIUM").upper()
        confidence = vulnerability.get("confidence", 0.5)
        masvs_controls = vulnerability.get("masvs_controls", [])
        
        # Base risk scores
        severity_scores = {
            "CRITICAL": 10.0,
            "HIGH": 8.0,
            "MEDIUM": 6.0,
            "LOW": 4.0,
            "INFO": 2.0
        }
        
        base_score = severity_scores.get(severity, 6.0)
        
        # Adjust based on confidence
        confidence_multiplier = max(0.5, confidence)
        adjusted_score = base_score * confidence_multiplier
        
        # Adjust based on MASVS controls
        masvs_multiplier = 1.0
        if masvs_controls:
            # Higher impact for multiple MASVS controls
            masvs_multiplier = min(1.5, 1.0 + (len(masvs_controls) * 0.1))
        
        final_score = min(10.0, adjusted_score * masvs_multiplier)
        
        return {
            "base_score": base_score,
            "confidence_adjusted_score": adjusted_score,
            "final_risk_score": final_score,
            "risk_level": self._get_risk_level(final_score),
            "masvs_impact": len(masvs_controls) > 0,
            "calculation_factors": {
                "severity": severity,
                "confidence": confidence,
                "masvs_controls_count": len(masvs_controls),
                "confidence_multiplier": confidence_multiplier,
                "masvs_multiplier": masvs_multiplier
            }
        }
    
    def _get_risk_level(self, score: float) -> str:
        """Convert risk score to risk level."""
        if score >= 9.0:
            return "CRITICAL"
        elif score >= 7.0:
            return "HIGH"
        elif score >= 5.0:
            return "MEDIUM"
        elif score >= 3.0:
            return "LOW"
        else:
            return "INFORMATIONAL"
    
    def _perform_compliance_analysis(self, vulnerabilities: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Perform comprehensive MASVS compliance analysis."""
        start_time = time.time()
        
        logger.debug("Performing MASVS compliance analysis...")
        
        try:
            compliance_analysis = self.masvs_analyzer.analyze_masvs_compliance(vulnerabilities)
            
            self.processing_times["compliance_analysis"] = time.time() - start_time
            self.stats["compliance_analyzed"] = 1
            
            logger.debug(f"Compliance analysis completed in {self.processing_times['compliance_analysis']:.2f}s")
            return compliance_analysis
            
        except Exception as e:
            logger.error(f"Compliance analysis failed: {e}")
            return {"error": str(e), "compliance_report": None}
    
    def _generate_processing_results(self, vulnerabilities: List[Dict[str, Any]], 
                                   compliance_analysis: Dict[str, Any],
                                   context: Dict[str, Any]) -> Dict[str, Any]:
        """Generate comprehensive processing results."""
        
        # Calculate summary statistics
        summary_stats = self._calculate_summary_statistics(vulnerabilities)
        
        # Extract MASVS coverage information
        masvs_coverage = self._extract_masvs_coverage(vulnerabilities, compliance_analysis)
        
        # Generate recommendations
        recommendations = self._generate_recommendations(vulnerabilities, compliance_analysis)
        
        return {
            "processed_vulnerabilities": vulnerabilities,
            "summary_statistics": summary_stats,
            "masvs_coverage": masvs_coverage,
            "compliance_analysis": compliance_analysis,
            "recommendations": recommendations,
            "processing_metadata": {
                "total_processed": len(vulnerabilities),
                "processing_time": self.processing_times["total"],
                "masvs_integration_enabled": True,
                "processor_version": "1.0.0",
                "timestamp": datetime.now().isoformat()
            },
            "performance_metrics": self.processing_times.copy(),
            "statistics": self.stats.copy()
        }
    
    def _calculate_summary_statistics(self, vulnerabilities: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Calculate summary statistics for processed vulnerabilities."""
        
        severity_counts = defaultdict(int)
        masvs_category_counts = defaultdict(int)
        masvs_control_counts = defaultdict(int)
        
        total_vulnerabilities = len(vulnerabilities)
        vulnerabilities_with_masvs = 0
        
        for vuln in vulnerabilities:
            # Count by severity
            severity = vuln.get("severity", "UNKNOWN").upper()
            severity_counts[severity] += 1
            
            # Count MASVS information
            masvs_controls = vuln.get("masvs_controls", [])
            if masvs_controls:
                vulnerabilities_with_masvs += 1
                
                # Count by MASVS category
                masvs_category = vuln.get("masvs_category", "GENERAL")
                masvs_category_counts[masvs_category] += 1
                
                # Count individual controls
                for control in masvs_controls:
                    masvs_control_counts[control] += 1
        
        return {
            "total_vulnerabilities": total_vulnerabilities,
            "vulnerabilities_with_masvs": vulnerabilities_with_masvs,
            "masvs_coverage_percentage": (vulnerabilities_with_masvs / total_vulnerabilities * 100) if total_vulnerabilities > 0 else 0,
            "severity_distribution": dict(severity_counts),
            "masvs_category_distribution": dict(masvs_category_counts),
            "masvs_control_distribution": dict(masvs_control_counts),
            "unique_masvs_controls": len(masvs_control_counts),
            "unique_masvs_categories": len(masvs_category_counts)
        }
    
    def _extract_masvs_coverage(self, vulnerabilities: List[Dict[str, Any]], 
                              compliance_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Extract comprehensive MASVS coverage information."""
        
        all_controls = set()
        all_categories = set()
        
        for vuln in vulnerabilities:
            masvs_controls = vuln.get("masvs_controls", [])
            for control in masvs_controls:
                all_controls.add(control)
                if "-" in control:
                    category = control.split("-")[1]
                    all_categories.add(category)
        
        compliance_report = compliance_analysis.get("compliance_report", {})
        overall_metrics = compliance_report.get("overall", {})
        
        return {
            "controls_covered": sorted(list(all_controls)),
            "categories_covered": sorted(list(all_categories)),
            "total_controls_covered": len(all_controls),
            "total_categories_covered": len(all_categories),
            "masvs_version": "2.0",
            "compliance_percentage": overall_metrics.get("coverage_percentage", 0.0),
            "operational_categories": overall_metrics.get("operational_categories", 0),
            "target_achievement": overall_metrics.get("covered_controls", 0) >= 20
        }
    
    def _generate_recommendations(self, vulnerabilities: List[Dict[str, Any]], 
                                compliance_analysis: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Generate comprehensive recommendations based on processing results."""
        
        recommendations = []
        
        # Add compliance-based recommendations
        compliance_recommendations = compliance_analysis.get("recommendations", [])
        recommendations.extend(compliance_recommendations)
        
        # Add vulnerability-specific recommendations
        high_severity_count = sum(1 for v in vulnerabilities if v.get("severity", "").upper() in ["HIGH", "CRITICAL"])
        
        if high_severity_count > 0:
            recommendations.append({
                "priority": "HIGH",
                "category": "SECURITY",
                "title": "Address High Severity Vulnerabilities",
                "description": f"Found {high_severity_count} high/critical severity vulnerabilities requiring immediate attention.",
                "action": "Prioritize remediation of high and critical severity vulnerabilities."
            })
        
        # Add MASVS coverage recommendations
        vulnerabilities_without_masvs = sum(1 for v in vulnerabilities if not v.get("masvs_controls"))
        if vulnerabilities_without_masvs > 0:
            recommendations.append({
                "priority": "MEDIUM",
                "category": "COMPLIANCE",
                "title": "Improve MASVS Control Coverage",
                "description": f"{vulnerabilities_without_masvs} vulnerabilities lack MASVS control mappings.",
                "action": "Review and enhance MASVS control mapping for better compliance tracking."
            })
        
        return recommendations
    
    def _generate_error_results(self, vulnerabilities: List[Dict[str, Any]], 
                              error_message: str) -> Dict[str, Any]:
        """Generate error results when processing fails."""
        
        return {
            "processed_vulnerabilities": vulnerabilities,
            "summary_statistics": {"total_vulnerabilities": len(vulnerabilities)},
            "masvs_coverage": {"error": "MASVS coverage analysis failed"},
            "compliance_analysis": {"error": error_message},
            "recommendations": [{
                "priority": "HIGH",
                "category": "SYSTEM",
                "title": "Processing Error",
                "description": f"Vulnerability processing failed: {error_message}",
                "action": "Review system configuration and retry processing."
            }],
            "processing_metadata": {
                "error": error_message,
                "timestamp": datetime.now().isoformat()
            },
            "performance_metrics": self.processing_times.copy(),
            "statistics": self.stats.copy()
        }
    
    def _update_statistics(self, input_count: int, output_count: int):
        """Update processing statistics."""
        self.stats["total_processed"] += input_count
        self.stats["enhanced_vulnerabilities"] = output_count
    
    def get_processing_statistics(self) -> Dict[str, Any]:
        """Get current processing statistics."""
        return {
            "statistics": self.stats.copy(),
            "performance_metrics": self.processing_times.copy(),
            "last_updated": datetime.now().isoformat()
        }
    
    def reset_statistics(self):
        """Reset processing statistics."""
        for key in self.stats:
            self.stats[key] = 0
        for key in self.processing_times:
            self.processing_times[key] = 0.0
        
        logger.info("Processing statistics reset")

# Global processor instance
_vulnerability_processor = None

def get_vulnerability_processor(config: Dict[str, Any] = None) -> EnhancedVulnerabilityProcessor:
    """Get global vulnerability processor instance."""
    global _vulnerability_processor
    if _vulnerability_processor is None:
        _vulnerability_processor = EnhancedVulnerabilityProcessor(config)
    return _vulnerability_processor

def process_vulnerabilities_with_masvs(vulnerabilities: List[Dict[str, Any]], 
                                     context: Dict[str, Any] = None) -> Dict[str, Any]:
    """Convenience function for processing vulnerabilities with MASVS integration."""
    processor = get_vulnerability_processor()
    return processor.process_vulnerabilities(vulnerabilities, context) 