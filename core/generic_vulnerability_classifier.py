#!/usr/bin/env python3
"""
Generic Vulnerability Classifier

This module provides generic vulnerability classification that works with ANY APK,
not just specific ones like InjuredAndroid. It detects similar vulnerability patterns
but classifies them generically.
"""

import logging
import re
from dataclasses import dataclass
from typing import Any, Dict, List, Optional

logger = logging.getLogger(__name__)

@dataclass
class GenericVulnerability:
    """Represents a generic security vulnerability (not APK-specific)."""

    vulnerability_type: str  # e.g., "weak_encryption", "hardcoded_secret"
    severity: str
    confidence: float
    location: str
    description: str
    remediation: str
    original_content: str
    decoded_content: Optional[str] = None

    # REMOVED: No APK-specific flags
    # injuredandroid_flag: Optional[int] = None

class GenericVulnerabilityClassifier:
    """Classifies vulnerabilities generically for any APK."""

    def __init__(self):
        self.vulnerability_patterns = {
            "weak_encryption": {
                "patterns": ["rot47", "caesar", "xor", "base64"],
                "description": "Weak or trivial encryption detected",
                "severity": "MEDIUM",
            },
            "hardcoded_secret": {
                "patterns": ["api_key", "password", "secret", "token", "credential"],
                "description": "Hardcoded secrets or credentials detected",
                "severity": "HIGH",
            },
            "insecure_storage": {
                "patterns": ["sqlite", "sharedpreferences", "external_storage"],
                "description": "Insecure data storage detected",
                "severity": "MEDIUM",
            },
            "cloud_service_exposure": {
                "patterns": ["firebase", "aws", "s3_bucket", "database_url"],
                "description": "Cloud service credentials or endpoints exposed",
                "severity": "HIGH",
            },
            "network_security": {
                "patterns": ["http://", "allowBackup", "usesCleartextTraffic"],
                "description": "Network security configuration issues",
                "severity": "MEDIUM",
            },
        }

    def classify_vulnerability(
        self,
        content: str,
        decoded_content: Optional[str] = None,
        location: str = "unknown",
    ) -> Optional[GenericVulnerability]:
        """Classify a potential vulnerability generically."""

        analysis_text = (decoded_content or content).lower()

        for vuln_type, config in self.vulnerability_patterns.items():
            if any(pattern in analysis_text for pattern in config["patterns"]):
                return GenericVulnerability(
                    vulnerability_type=vuln_type,
                    severity=config["severity"],
                    confidence=self._calculate_confidence(
                        analysis_text, config["patterns"]
                    ),
                    location=location,
                    description=config["description"],
                    remediation=self._get_remediation(vuln_type),
                    original_content=content[:200],  # Limit length
                    decoded_content=decoded_content[:200] if decoded_content else None,
                )

        return None

    def _calculate_confidence(self, text: str, patterns: List[str]) -> float:
        """Calculate confidence based on pattern matches."""
        match_count = sum(1 for pattern in patterns if pattern in text)
        base_confidence = min(0.5 + (match_count * 0.2), 0.95)

        # Higher confidence for multiple security indicators
        security_indicators = ["password", "secret", "key", "token", "credential"]
        security_matches = sum(
            1 for indicator in security_indicators if indicator in text
        )

        if security_matches >= 2:
            base_confidence = min(base_confidence + 0.2, 0.95)

        return base_confidence

    def _get_remediation(self, vuln_type: str) -> str:
        """Get remediation advice for vulnerability type."""
        remediations = {
            "weak_encryption": "Use strong encryption algorithms like AES-256. Avoid simple ciphers.",
            "hardcoded_secret": "Store secrets securely using Android Keystore or secure configuration.",
            "insecure_storage": "Use Android Keystore or encrypt sensitive data before storage.",
            "cloud_service_exposure": "Use proper authentication and avoid exposing service URLs.",
            "network_security": "Enable certificate pinning and use HTTPS for all communications.",
        }

        return remediations.get(vuln_type, "Review and secure this vulnerability.")

# Global instance for use across the application
generic_classifier = GenericVulnerabilityClassifier()
