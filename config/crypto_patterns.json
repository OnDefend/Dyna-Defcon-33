{
  "weak_encryption_algorithms": {
    "DES": {
      "patterns": [
        "DES\\.getInstance\\(",
        "Cipher\\.getInstance\\([\"']DES[\"']",
        "Cipher\\.getInstance\\([\"']DES/[^\"']*[\"']",
        "Algorithm\\s*=\\s*[\"']DES[\"']",
        "\\bDES\\b.*Cipher",
        "DESKeySpec\\(",
        "DESede"
      ],
      "severity": "CRITICAL",
      "reason": "DES is a deprecated encryption algorithm with known vulnerabilities and 56-bit key size",
      "recommendation": "Use AES-256 (Advanced Encryption Standard) with GCM mode for authenticated encryption",
      "cwe_id": "CWE-327",
      "confidence": 0.95,
      "context_keywords": ["encrypt", "decrypt", "cipher", "crypto", "security"],
      "exclude_patterns": [
        "//.*DES",
        "/\\*.*DES.*\\*/",
        "\".*example.*DES.*\"",
        "description.*DES"
      ]
    },
    "RC4": {
      "patterns": [
        "\\bRC4\\b",
        "ARCFOUR",
        "Cipher\\.getInstance\\([\"']RC4[\"']",
        "Algorithm\\s*=\\s*[\"']RC4[\"']"
      ],
      "severity": "HIGH",
      "reason": "RC4 stream cipher has known weaknesses and biases in key scheduling",
      "recommendation": "Use ChaCha20-Poly1305 or AES-GCM for stream encryption",
      "cwe_id": "CWE-327",
      "confidence": 0.90,
      "context_keywords": ["stream", "cipher", "encrypt", "crypto"],
      "exclude_patterns": [
        "//.*RC4",
        "/\\*.*RC4.*\\*/"
      ]
    },
    "MD5": {
      "patterns": [
        "MessageDigest\\.getInstance\\([\"']MD5[\"']\\)",
        "\\.digest\\(\\).*MD5",
        "DigestUtils\\.md5",
        "Hashing\\.md5\\(",
        "Algorithm\\s*=\\s*[\"']MD5[\"']",
        "\\bMD5\\b.*Hash",
        "getMD5"
      ],
      "severity": "HIGH", 
      "reason": "MD5 hash function is cryptographically broken and vulnerable to collision attacks",
      "recommendation": "Use SHA-256, SHA-3, or BLAKE2 for cryptographic hashing",
      "cwe_id": "CWE-327",
      "confidence": 0.85,
      "context_keywords": ["hash", "digest", "checksum", "integrity"],
      "exclude_patterns": [
        "//.*MD5",
        "/\\*.*MD5.*\\*/",
        "filename.*md5",
        "etag.*md5",
        "non.*crypto.*md5"
      ]
    },
    "SHA1": {
      "patterns": [
        "MessageDigest\\.getInstance\\([\"']SHA-1[\"']\\)",
        "MessageDigest\\.getInstance\\([\"']SHA1[\"']\\)",
        "DigestUtils\\.sha1",
        "Hashing\\.sha1\\(",
        "Algorithm\\s*=\\s*[\"']SHA-?1[\"']",
        "getSHA1"
      ],
      "severity": "MEDIUM",
      "reason": "SHA-1 is deprecated due to collision vulnerabilities demonstrated in practice",
      "recommendation": "Use SHA-256 or SHA-3 for cryptographic applications",
      "cwe_id": "CWE-327", 
      "confidence": 0.80,
      "context_keywords": ["hash", "digest", "signature", "integrity"],
      "exclude_patterns": [
        "//.*SHA-?1",
        "/\\*.*SHA-?1.*\\*/",
        "git.*sha1",
        "legacy.*sha1"
      ]
    }
  },
  "weak_key_generation": {
    "insufficient_randomness": {
      "patterns": [
        "new Random\\(\\)",
        "new Random\\(System\\.currentTimeMillis\\(\\)\\)",
        "Math\\.random\\(\\)",
        "System\\.currentTimeMillis\\(\\).*key",
        "System\\.nanoTime\\(\\).*key",
        "new Date\\(\\)\\.getTime\\(\\).*key",
        "Random\\(\\d+\\)",
        "setSeed\\("
      ],
      "severity": "HIGH",
      "reason": "Insufficient randomness for cryptographic operations makes keys predictable",
      "recommendation": "Use SecureRandom with strong entropy sources for cryptographic key generation",
      "cwe_id": "CWE-338",
      "confidence": 0.75,
      "context_keywords": ["key", "encrypt", "decrypt", "crypto", "cipher", "password", "secret"],
      "exclude_patterns": [
        "//.*Random",
        "/\\*.*Random.*\\*/",
        "test.*Random",
        "demo.*Random"
      ]
    },
    "weak_key_derivation": {
      "patterns": [
        "getBytes\\(\\).*key",
        "password\\.getBytes\\(\\)",
        "PBEKeySpec\\([^,]*,[^,]*,\\s*1\\s*,",
        "PBEKeySpec\\([^,]*,[^,]*,\\s*[1-9]\\d{0,2}\\s*,",
        "iteration.*[1-9]\\d{0,2}\\b",
        "PBKDF2.*iteration.*[1-9]\\d{0,2}"
      ],
      "severity": "MEDIUM",
      "reason": "Weak key derivation with insufficient iterations or poor salt handling",
      "recommendation": "Use PBKDF2 with at least 100,000 iterations or Argon2 for password-based key derivation",
      "cwe_id": "CWE-326",
      "confidence": 0.70,
      "context_keywords": ["password", "key", "derive", "pbkdf", "salt"],
      "exclude_patterns": []
    }
  },
  "insecure_cipher_modes": {
    "ECB_mode": {
      "patterns": [
        "Cipher\\.getInstance\\([\"'][^/]+/ECB[^\"']*[\"']\\)",
        "/ECB/",
        "CipherMode\\.ECB",
        "ENCRYPT_MODE.*ECB"
      ],
      "severity": "HIGH",
      "reason": "ECB mode reveals patterns in plaintext and should not be used for sensitive data",
      "recommendation": "Use CBC with random IV, GCM, or CTR mode for secure encryption",
      "cwe_id": "CWE-327",
      "confidence": 0.90,
      "context_keywords": ["cipher", "encrypt", "mode"],
      "exclude_patterns": [
        "//.*ECB",
        "/\\*.*ECB.*\\*/"
      ]
    },
    "no_padding": {
      "patterns": [
        "Cipher\\.getInstance\\([\"'][^/]+/[^/]+/NoPadding[\"']\\)",
        "/NoPadding",
        "CipherPadding\\.None"
      ],
      "severity": "MEDIUM",
      "reason": "No padding can leak information about message length",
      "recommendation": "Use PKCS5Padding or OAEP padding for RSA encryption",
      "cwe_id": "CWE-327",
      "confidence": 0.75,
      "context_keywords": ["cipher", "padding", "encrypt"],
      "exclude_patterns": []
    }
  },
  "weak_rsa_keys": {
    "small_key_size": {
      "patterns": [
        "KeyPairGenerator\\.getInstance\\([\"']RSA[\"']\\).*initialize\\(\\s*(?:512|768|1024)\\s*\\)",
        "RSA.*512",
        "RSA.*768", 
        "RSA.*1024",
        "RSAKeyGenParameterSpec\\(\\s*(?:512|768|1024)\\s*,",
        "keysize.*(?:512|768|1024).*RSA"
      ],
      "severity": "HIGH",
      "reason": "RSA key sizes below 2048 bits are considered weak and can be factored",
      "recommendation": "Use RSA keys of at least 2048 bits, preferably 4096 bits for long-term security",
      "cwe_id": "CWE-326",
      "confidence": 0.85,
      "context_keywords": ["rsa", "key", "size", "generate"],
      "exclude_patterns": [
        "//.*RSA.*(?:512|768|1024)",
        "test.*RSA.*(?:512|768|1024)"
      ]
    }
  },
  "hardcoded_cryptographic_keys": {
    "static_keys": {
      "patterns": [
        "private.*key.*=.*[\"'][A-Za-z0-9+/]{20,}[\"']",
        "secret.*key.*=.*[\"'][A-Za-z0-9+/]{16,}[\"']",
        "static.*final.*KEY.*=.*[\"']",
        "String\\s+key\\s*=\\s*[\"'][A-Za-z0-9+/]{16,}[\"']",
        "byte\\[\\].*key.*=.*\\{",
        "aes.*key.*[\"'][A-Za-z0-9+/]{16,}[\"']"
      ],
      "severity": "CRITICAL",
      "reason": "Hardcoded cryptographic keys in source code can be extracted by attackers",
      "recommendation": "Use secure key management systems, environment variables, or key derivation functions",
      "cwe_id": "CWE-798",
      "confidence": 0.80,
      "context_keywords": ["key", "secret", "private", "aes", "encrypt"],
      "exclude_patterns": [
        "//.*key.*=",
        "/\\*.*key.*\\*/",
        "example.*key",
        "test.*key",
        "demo.*key"
      ]
    }
  },
  "ssl_tls_vulnerabilities": {
    "weak_protocols": {
      "patterns": [
        "SSLContext\\.getInstance\\([\"']SSL[\"']\\)",
        "SSLContext\\.getInstance\\([\"']SSLv2[\"']\\)",
        "SSLContext\\.getInstance\\([\"']SSLv3[\"']\\)",
        "SSLContext\\.getInstance\\([\"']TLSv1[\"']\\)",
        "SSLContext\\.getInstance\\([\"']TLSv1\\.1[\"']\\)",
        "setEnabledProtocols.*SSL",
        "setEnabledProtocols.*TLSv1[^.2]"
      ],
      "severity": "HIGH",
      "reason": "Weak SSL/TLS protocol versions are vulnerable to various attacks",
      "recommendation": "Use TLS 1.2 or TLS 1.3 with strong cipher suites",
      "cwe_id": "CWE-327",
      "confidence": 0.90,
      "context_keywords": ["ssl", "tls", "protocol", "connection"],
      "exclude_patterns": [
        "//.*SSL",
        "disable.*SSL",
        "legacy.*support"
      ]
    },
    "certificate_validation_disabled": {
      "patterns": [
        "TrustManager.*checkClientTrusted.*\\{\\s*\\}",
        "TrustManager.*checkServerTrusted.*\\{\\s*\\}",
        "getAcceptedIssuers.*return\\s*null",
        "setHostnameVerifier.*ALLOW_ALL",
        "HostnameVerifier.*verify.*return\\s*true",
        "trustAllCerts",
        "disableCertificateValidation"
      ],
      "severity": "CRITICAL",
      "reason": "Disabled certificate validation allows man-in-the-middle attacks",
      "recommendation": "Implement proper certificate validation and use certificate pinning",
      "cwe_id": "CWE-295",
      "confidence": 0.95,
      "context_keywords": ["certificate", "trust", "validation", "hostname"],
      "exclude_patterns": [
        "//.*trust",
        "test.*environment",
        "development.*only"
      ]
    }
  }
} 