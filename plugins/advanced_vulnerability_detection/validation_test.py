#!/usr/bin/env python3
"""
Validation Test for Refactored Advanced Vulnerability Detection Plugin

This test verifies that the refactored plugin works correctly and
addresses all the identified issues.
"""

import tempfile
import yaml
from unittest.mock import Mock, patch
from pathlib import Path

def create_test_apk_context():
    """Create a mock APK context for testing."""
    apk_ctx = Mock()
    apk_ctx.package_name = "com.test.app"
    apk_ctx.manifest_xml = '''<?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android">
        <application android:allowBackup="true">
        </application>
    </manifest>'''
    
    # Create mock classes
    mock_class = Mock()
    mock_class.name = "TestClass"
    mock_class.get_source.return_value = '''
    public class TestClass {
        public void vulnerableMethod() {
            String sql = "SELECT * FROM users WHERE id = " + userId;
            database.rawQuery(sql, null);
        }
    }
    '''
    
    apk_ctx.classes = [mock_class]
    return apk_ctx

def create_test_patterns_config():
    """Create a test patterns configuration."""
    return {
        'risk_thresholds': {
            'low': 10,
            'medium': 25,
            'high': 40,
            'critical': 60
        },
        'max_findings_per_category': 50,
        'sql_injection_patterns': {
            'content_provider_queries': [
                r'rawQuery\s*\(\s*[^,]*\+'
            ]
        },
        'backup_patterns': [
            r'android:allowBackup\s*=\s*["\']true["\']'
        ]
    }

def test_configuration_loading():
    """Test external configuration loading."""
    print("Testing configuration loading...")
    
    # Create temporary config file
    config_data = create_test_patterns_config()
    
    with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:
        yaml.dump(config_data, f)
        config_path = f.name
    
    try:
        # Test configuration loading
        from plugins.advanced_vulnerability_detection_refactored import RefactoredAdvancedVulnerabilityDetector
        from plugins.advanced_vulnerability_detection.data_structures import AnalysisConfiguration
        
        apk_ctx = create_test_apk_context()
        config = AnalysisConfiguration()
        
        # Mock the comprehensive analyzer to avoid dependency issues
        with patch('plugins.advanced_vulnerability_detection.class_analysis_helper.create_comprehensive_analyzer'):
            detector = RefactoredAdvancedVulnerabilityDetector(apk_ctx, config, config_path)
            
            # Verify patterns were loaded
            assert 'sql_injection_patterns' in detector.patterns
            assert detector.config.max_findings_per_category == 50
            print("‚úÖ Configuration loading successful")
            
    except Exception as e:
        print(f"‚ùå Configuration loading failed: {e}")
        raise
    finally:
        Path(config_path).unlink()

def test_pattern_compilation():
    """Test regex pattern compilation."""
    print("Testing pattern compilation...")
    
    try:
        from plugins.advanced_vulnerability_detection.class_analysis_helper import UniversalClassAnalyzer
        from plugins.advanced_vulnerability_detection.data_structures import AnalysisConfiguration, VulnerabilityCategory
        
        apk_ctx = create_test_apk_context()
        config = AnalysisConfiguration()
        
        with patch('plugins.advanced_vulnerability_detection.class_analysis_helper.create_comprehensive_analyzer'):
            analyzer = UniversalClassAnalyzer(apk_ctx, config)
            
            # Test pattern compilation
            test_patterns = {
                'content_provider_queries': [
                    r'rawQuery\s*\(\s*[^,]*\+',
                    r'execSQL\s*\(\s*[^,]*\+'
                ]
            }
            
            analyzer.compile_patterns(test_patterns, VulnerabilityCategory.SQL_INJECTION)
            
            # Verify patterns were compiled
            compiled_patterns = analyzer.compiled_patterns.get('sql_injection', [])
            assert len(compiled_patterns) == 2
            
            # Verify patterns have compiled regex
            for pattern in compiled_patterns:
                assert pattern.compiled_regex is not None
                assert pattern.category == 'sql_injection'
                assert pattern.subcategory == 'content_provider_queries'
            
            print("‚úÖ Pattern compilation successful")
            
    except Exception as e:
        print(f"‚ùå Pattern compilation failed: {e}")
        raise

def test_data_structures():
    """Test structured data classes."""
    print("Testing data structures...")
    
    try:
        from plugins.advanced_vulnerability_detection.data_structures import (
            VulnerabilityMatch, VulnerabilityFinding, VulnerabilityCategory, SeverityLevel
        )
        
        # Test VulnerabilityMatch
        match = VulnerabilityMatch(
            pattern=r'rawQuery\s*\(\s*[^,]*\+',
            match_text='rawQuery(sql + ',
            line_number=5,
            column_start=10,
            column_end=20,
            severity=SeverityLevel.HIGH,
            confidence=0.8
        )
        
        assert match.pattern is not None
        assert match.severity == SeverityLevel.HIGH
        assert match.confidence == 0.8
        
        # Test VulnerabilityFinding with auto-calculated fields
        finding = VulnerabilityFinding(
            class_name="TestClass",
            vulnerability_type="sql_injection",
            category=VulnerabilityCategory.SQL_INJECTION,
            matches=[match]
        )
        
        # Verify auto-calculated fields
        assert finding.total_matches == 1
        assert finding.max_severity == SeverityLevel.HIGH
        assert finding.confidence == 0.8
        
        print("‚úÖ Data structures working correctly")
        
    except Exception as e:
        print(f"‚ùå Data structures test failed: {e}")
        raise

def test_error_handling():
    """Test improved error handling."""
    print("Testing error handling...")
    
    try:
        from plugins.advanced_vulnerability_detection.formatters import format_error_context
        
        # Test error context formatting
        error_msg = format_error_context(
            "Pattern matching failed",
            {'class_name': 'TestClass', 'pattern': 'sql_injection', 'category': 'content_provider_queries'}
        )
        
        assert "Pattern matching failed" in error_msg
        assert "class_name=TestClass" in error_msg
        assert "pattern=sql_injection" in error_msg
        assert "category=content_provider_queries" in error_msg
        
        print("‚úÖ Error handling working correctly")
        
    except Exception as e:
        print(f"‚ùå Error handling test failed: {e}")
        raise

def test_formatters():
    """Test output formatters."""
    print("Testing output formatters...")
    
    try:
        from plugins.advanced_vulnerability_detection.data_structures import (
            VulnerabilityAnalysisResult, VulnerabilityCategory
        )
        from plugins.advanced_vulnerability_detection.formatters import (
            format_vulnerability_results, get_severity_style, get_risk_level_text
        )
        
        # Test basic result formatting
        results = VulnerabilityAnalysisResult()
        results.total_vulnerabilities = 5
        results.total_classes_analyzed = 10
        results.overall_risk_score = 35.0
        results.analysis_duration = 2.5
        
        formatted = format_vulnerability_results(results)
        assert formatted is not None
        
        # Test utility functions
        assert get_severity_style(SeverityLevel.HIGH) == "red"
        assert get_risk_level_text(65.0) == "CRITICAL"
        assert get_risk_level_text(35.0) == "MEDIUM"
        
        print("‚úÖ Formatters working correctly")
        
    except Exception as e:
        print(f"‚ùå Formatters test failed: {e}")
        raise

def run_validation_tests():
    """Run all validation tests."""
    print("üß™ Running Advanced Vulnerability Detection Plugin Validation Tests\n")
    
    tests = [
        test_configuration_loading,
        test_pattern_compilation,
        test_data_structures,
        test_error_handling,
        test_formatters,
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            test()
            passed += 1
        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            failed += 1
        print()
    
    print(f"üìä Test Results: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("üéâ All validation tests passed! Refactoring successful.")
        return True
    else:
        print("‚ö†Ô∏è  Some validation tests failed. Please review the implementation.")
        return False

if __name__ == "__main__":
    success = run_validation_tests()
    exit(0 if success else 1) 