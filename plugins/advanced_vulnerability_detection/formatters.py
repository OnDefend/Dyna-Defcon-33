#!/usr/bin/env python3
"""
Formatters for Advanced Vulnerability Detection Plugin

This module contains all formatting functions used to generate
human-readable reports from vulnerability analysis results.
"""

from typing import Dict, List, Any, Union
from rich.text import Text
from rich.table import Table
from rich.panel import Panel
from rich.console import Console

from .data_structures import (
    VulnerabilityAnalysisResult,
    CategoryAnalysisResult,
    VulnerabilityFinding,
    SeverityLevel,
    VulnerabilityCategory
)

def format_vulnerability_results(results: VulnerabilityAnalysisResult) -> Text:
    """
    Format comprehensive vulnerability analysis results into Rich Text.
    
    Args:
        results: Complete vulnerability analysis results
        
    Returns:
        Formatted Rich Text object
    """
    result = Text()
    
    # Add header
    result.append("Advanced Vulnerability Detection Analysis\n", style="bold magenta")
    result.append(f"Classes Analyzed: {results.total_classes_analyzed}\n", style="cyan")
    result.append(f"Total Vulnerabilities: {results.total_vulnerabilities}\n", style="cyan")
    result.append(f"Overall Risk Score: {results.overall_risk_score:.1f}\n", style="cyan")
    result.append(f"Analysis Duration: {results.analysis_duration:.2f}s\n\n", style="cyan")
    
    # Format each category
    categories = [
        ("SQL Injection", results.sql_injection),
        ("Path Traversal", results.path_traversal),
        ("Data Storage", results.data_storage),
        ("Backup Analysis", results.backup_analysis),
        ("Injection Attacks", results.injection_attacks),
        ("Sensitive Data Exposure", results.sensitive_data_exposure),
    ]
    
    for category_name, category_result in categories:
        if category_result.total_vulnerabilities > 0:
            result.append(f"\n{category_name}:\n", style="bold yellow")
            category_text = format_category_results(category_result)
            result.append(category_text)
    
    # Add dynamic test results if available
    if results.dynamic_tests:
        result.append("\nDynamic Testing Results:\n", style="bold blue")
        for test_result in results.dynamic_tests:
            result.append(f"  {test_result.test_name}: ", style="cyan")
            if test_result.executed:
                status = "PASSED" if test_result.success else "FAILED"
                style = "green" if test_result.success else "red"
                result.append(f"{status}\n", style=style)
                if test_result.findings:
                    for finding in test_result.findings:
                        result.append(f"    - {finding}\n", style="yellow")
            else:
                result.append("NOT EXECUTED\n", style="dim")
    
    # Add recommendations
    if results.recommendations:
        result.append("\nRecommendations:\n", style="bold green")
        for i, recommendation in enumerate(results.recommendations, 1):
            result.append(f"{i}. {recommendation}\n", style="green")
    
    # Add MASVS controls
    if results.masvs_controls:
        result.append("\nMASVS Controls:\n", style="bold blue")
        for control in results.masvs_controls:
            result.append(f"  - {control}\n", style="blue")
    
    # Add errors and warnings
    if results.errors:
        result.append("\nErrors:\n", style="bold red")
        for error in results.errors:
            result.append(f"  - {error}\n", style="red")
    
    if results.warnings:
        result.append("\nWarnings:\n", style="bold yellow")
        for warning in results.warnings:
            result.append(f"  - {warning}\n", style="yellow")
    
    return result

def format_category_results(category_result: CategoryAnalysisResult) -> Text:
    """
    Format results for a specific vulnerability category.
    
    Args:
        category_result: Results for a specific category
        
    Returns:
        Formatted Rich Text object
    """
    result = Text()
    
    # Category summary
    result.append(f"  Total Vulnerabilities: {category_result.total_vulnerabilities}\n", style="cyan")
    result.append(f"  Classes with Issues: {category_result.classes_with_issues}\n", style="cyan")
    result.append(f"  Risk Score: {category_result.risk_score:.1f}\n", style="cyan")
    
    # Individual findings
    for finding in category_result.findings:
        if finding.total_matches > 0:
            result.append(f"\n    {finding.class_name}:\n", style="bold white")
            result.append(f"      Type: {finding.vulnerability_type}\n", style="white")
            result.append(f"      Matches: {finding.total_matches}\n", style="white")
            result.append(f"      Severity: {finding.max_severity.value}\n", 
                         style=get_severity_style(finding.max_severity))
            result.append(f"      Confidence: {finding.confidence:.2f}\n", style="white")
            
            if finding.description:
                result.append(f"      Description: {finding.description}\n", style="dim")
            
            if finding.remediation:
                result.append(f"      Remediation: {finding.remediation}\n", style="green")
            
            if finding.masvs_control:
                result.append(f"      MASVS Control: {finding.masvs_control}\n", style="blue")
    
    return result

def get_severity_style(severity: SeverityLevel) -> str:
    """
    Get Rich style string for a severity level.
    
    Args:
        severity: Severity level
        
    Returns:
        Rich style string
    """
    style_map = {
        SeverityLevel.LOW: "green",
        SeverityLevel.MEDIUM: "yellow",
        SeverityLevel.HIGH: "red",
        SeverityLevel.CRITICAL: "bold red"
    }
    return style_map.get(severity, "white")

def get_risk_level_text(risk_score: float) -> str:
    """
    Get risk level text based on score.
    
    Args:
        risk_score: Numeric risk score
        
    Returns:
        Risk level text
    """
    if risk_score >= 60:
        return "CRITICAL"
    elif risk_score >= 40:
        return "HIGH"
    elif risk_score >= 25:
        return "MEDIUM"
    else:
        return "LOW"

def get_risk_level_style(risk_score: float) -> str:
    """
    Get Rich style for risk level.
    
    Args:
        risk_score: Numeric risk score
        
    Returns:
        Rich style string
    """
    if risk_score >= 60:
        return "bold red"
    elif risk_score >= 40:
        return "red"
    elif risk_score >= 25:
        return "yellow"
    else:
        return "green"

def generate_summary_text(results: VulnerabilityAnalysisResult) -> str:
    """
    Generate a summary text of the analysis results.
    
    Args:
        results: Complete vulnerability analysis results
        
    Returns:
        Summary text
    """
    risk_level = get_risk_level_text(results.overall_risk_score)
    
    summary = f"Advanced Vulnerability Detection completed with {results.total_vulnerabilities} vulnerabilities found "
    summary += f"across {results.total_classes_analyzed} classes analyzed. "
    summary += f"Overall risk level: {risk_level} (Score: {results.overall_risk_score:.1f})"
    
    if results.errors:
        summary += f". {len(results.errors)} errors encountered during analysis."
    
    return summary

def create_vulnerability_table(category_result: CategoryAnalysisResult) -> Table:
    """
    Create a Rich Table for vulnerability findings.
    
    Args:
        category_result: Results for a specific category
        
    Returns:
        Rich Table object
    """
    table = Table(title=f"{category_result.category.value.replace('_', ' ').title()} Vulnerabilities")
    
    table.add_column("Class", style="cyan")
    table.add_column("Type", style="white")
    table.add_column("Matches", justify="right", style="white")
    table.add_column("Severity", style="white")
    table.add_column("Confidence", justify="right", style="white")
    
    for finding in category_result.findings:
        if finding.total_matches > 0:
            table.add_row(
                finding.class_name,
                finding.vulnerability_type,
                str(finding.total_matches),
                finding.max_severity.value,
                f"{finding.confidence:.2f}"
            )
    
    return table

def enhance_with_masvs_mapping(base_result: Text, results: VulnerabilityAnalysisResult) -> Text:
    """
    Enhance results with MASVS control mapping.
    
    Args:
        base_result: Base formatted result
        results: Complete vulnerability analysis results
        
    Returns:
        Enhanced Rich Text object
    """
    enhanced_result = Text()
    enhanced_result.append(base_result)
    
    if results.masvs_controls:
        enhanced_result.append("\nMASVS Compliance Analysis:\n", style="bold blue")
        
        # Group controls by category
        control_groups = {}
        for control in results.masvs_controls:
            category = control.split('-')[1] if '-' in control else 'OTHER'
            if category not in control_groups:
                control_groups[category] = []
            control_groups[category].append(control)
        
        for category, controls in control_groups.items():
            enhanced_result.append(f"\n{category.title()}:\n", style="blue")
            for control in controls:
                enhanced_result.append(f"  - {control}\n", style="cyan")
    
    return enhanced_result

def format_error_context(error: str, context: Dict[str, Any]) -> str:
    """
    Format error message with context information.
    
    Args:
        error: Error message
        context: Context information
        
    Returns:
        Formatted error string
    """
    formatted_error = f"Error: {error}"
    
    if context:
        context_parts = []
        for key, value in context.items():
            context_parts.append(f"{key}={value}")
        formatted_error += f" (Context: {', '.join(context_parts)})"
    
    return formatted_error

def format_execution_metadata(results: VulnerabilityAnalysisResult) -> Text:
    """
    Format execution metadata for analysis transparency.
    
    Args:
        results: Complete vulnerability analysis results
        
    Returns:
        Formatted Rich Text object
    """
    metadata = Text()
    
    metadata.append("Execution Metadata:\n", style="bold cyan")
    metadata.append(f"  Total Classes Analyzed: {results.total_classes_analyzed}\n", style="white")
    metadata.append(f"  Analysis Duration: {results.analysis_duration:.2f}s\n", style="white")
    metadata.append(f"  Total Vulnerabilities Found: {results.total_vulnerabilities}\n", style="white")
    metadata.append(f"  Overall Risk Score: {results.overall_risk_score:.1f}\n", style="white")
    
    if results.errors:
        metadata.append(f"  Errors: {len(results.errors)}\n", style="red")
    
    if results.warnings:
        metadata.append(f"  Warnings: {len(results.warnings)}\n", style="yellow")
    
    return metadata 