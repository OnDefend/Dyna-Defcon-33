"""
Vulnerability Database for Library Vulnerability Scanner

This module contains the comprehensive vulnerability database with CVE information,
affected versions, and detailed vulnerability descriptions for various libraries.

Features:
- Comprehensive CVE database for common libraries
- Version mapping and affected version ranges
- Attack vector and exploitation information
- Remediation guidance and references
- Dynamic vulnerability pattern loading
"""

import logging
from typing import Dict, List, Set, Optional, Any
from datetime import datetime

from .data_structures import (
    VulnerabilityDatabaseEntry, VulnerabilitySeverity, ExploitabilityLevel,
    LibraryType
)

logger = logging.getLogger(__name__)

class LibraryVulnerabilityDatabase:
    """Comprehensive vulnerability database for library security analysis."""
    
    def __init__(self):
        """Initialize the vulnerability database."""
        self.vulnerability_db: Dict[str, VulnerabilityDatabaseEntry] = {}
        self._initialize_database()
    
    def _initialize_database(self) -> None:
        """Initialize comprehensive vulnerability database with known CVEs."""
        
        # OpenSSL HeartBleed (CVE-2014-0160)
        self.vulnerability_db["openssl_heartbleed"] = VulnerabilityDatabaseEntry(
            vulnerability_id="openssl_heartbleed",
            cve_id="CVE-2014-0160",
            title="OpenSSL HeartBleed Vulnerability",
            description="OpenSSL HeartBleed vulnerability allows attackers to read memory contents of applications using vulnerable OpenSSL versions",
            severity=VulnerabilitySeverity.CRITICAL,
            affected_versions=[
                "1.0.1", "1.0.1a", "1.0.1b", "1.0.1c", "1.0.1d", "1.0.1e", "1.0.1f"
            ],
            fixed_version="1.0.1g",
            attack_vectors=[
                "Remote memory disclosure",
                "Private key extraction", 
                "Session token theft",
                "Credentials harvesting"
            ],
            exploitability=ExploitabilityLevel.REMOTE,
            impact="Complete compromise of SSL/TLS secured communications",
            remediation="Update OpenSSL to version 1.0.1g or later",
            references=[
                "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0160",
                "https://heartbleed.com/"
            ],
            cvss_score=7.5,
            cvss_vector="CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
            applicable_library_types={LibraryType.CRYPTOGRAPHIC, LibraryType.NETWORKING},
            detection_patterns=["OpenSSL.*1\\.0\\.1[a-f]?", "libssl\\.so", "libcrypto\\.so"]
        )
        
        # OpenSSL Change Cipher Spec Injection (CVE-2014-0224)
        self.vulnerability_db["openssl_ccs_injection"] = VulnerabilityDatabaseEntry(
            vulnerability_id="openssl_ccs_injection",
            cve_id="CVE-2014-0224",
            title="OpenSSL Change Cipher Spec Injection",
            description="Change Cipher Spec Injection vulnerability in OpenSSL allows man-in-the-middle attacks",
            severity=VulnerabilitySeverity.HIGH,
            affected_versions=[
                "0.9.8za", "1.0.0m", "1.0.1h"
            ],
            fixed_version="1.0.1i",
            attack_vectors=[
                "Man-in-the-middle attacks",
                "SSL/TLS session hijacking",
                "Weak key extraction"
            ],
            exploitability=ExploitabilityLevel.REMOTE,
            impact="SSL/TLS communication compromise through MITM attacks",
            remediation="Update OpenSSL to version 1.0.1i or later",
            references=[
                "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224"
            ],
            cvss_score=6.8,
            applicable_library_types={LibraryType.CRYPTOGRAPHIC, LibraryType.NETWORKING},
            detection_patterns=["OpenSSL.*1\\.0\\.[01][a-h]?", "libssl\\.so", "libcrypto\\.so"]
        )
        
        # OkHTTP Vulnerabilities
        self._add_okhttp_vulnerabilities()
        
        # Native Library Vulnerabilities
        self._add_native_library_vulnerabilities()
        
        # Java Library Vulnerabilities
        self._add_java_library_vulnerabilities()
        
        logger.info(f"Initialized vulnerability database with {len(self.vulnerability_db)} entries")
    
    def _add_okhttp_vulnerabilities(self) -> None:
        """Add OkHTTP-specific vulnerabilities to the database."""
        
        # OkHTTP Certificate Pinning Bypass (CVE-2016-2402)
        self.vulnerability_db["okhttp_cert_pinning_bypass"] = VulnerabilityDatabaseEntry(
            vulnerability_id="okhttp_cert_pinning_bypass",
            cve_id="CVE-2016-2402",
            title="OkHTTP Certificate Pinning Bypass",
            description="OkHTTP versions prior to 3.1.2 contain a certificate pinning bypass vulnerability",
            severity=VulnerabilitySeverity.HIGH,
            affected_versions=["2.0.0", "2.1.0", "2.2.0", "2.3.0", "2.4.0", "2.5.0", "2.6.0", "2.7.5", "3.0.0", "3.0.1", "3.1.0", "3.1.1"],
            fixed_version="3.1.2",
            attack_vectors=[
                "Certificate validation bypass",
                "Man-in-the-middle attacks",
                "SSL/TLS interception"
            ],
            exploitability=ExploitabilityLevel.REMOTE,
            impact="Bypass of certificate pinning security controls",
            remediation="Update OkHTTP to version 3.1.2 or later",
            references=[
                "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-2402"
            ],
            cvss_score=7.4,
            applicable_library_types={LibraryType.NETWORKING},
            detection_patterns=["okhttp3?.*[2-3]\\.[0-1]\\.[0-1]", "com\\.squareup\\.okhttp3?"]
        )
        
        # OkHTTP HTTP/2 Denial of Service (CVE-2021-0341)
        self.vulnerability_db["okhttp_http2_dos"] = VulnerabilityDatabaseEntry(
            vulnerability_id="okhttp_http2_dos",
            cve_id="CVE-2021-0341",
            title="OkHTTP HTTP/2 Denial of Service",
            description="OkHTTP HTTP/2 implementation vulnerable to denial of service attacks",
            severity=VulnerabilitySeverity.MEDIUM,
            affected_versions=["4.9.0", "4.8.1", "4.8.0", "4.7.2", "4.7.1", "4.7.0"],
            fixed_version="4.9.1",
            attack_vectors=[
                "HTTP/2 stream manipulation",
                "Resource exhaustion",
                "Application crash"
            ],
            exploitability=ExploitabilityLevel.REMOTE,
            impact="Application denial of service through HTTP/2 exploitation",
            remediation="Update OkHTTP to version 4.9.1 or later",
            references=[
                "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-0341"
            ],
            cvss_score=5.3,
            applicable_library_types={LibraryType.NETWORKING},
            detection_patterns=["okhttp3?.*4\\.[7-9]\\.[0-1]", "com\\.squareup\\.okhttp3?"]
        )
    
    def _add_native_library_vulnerabilities(self) -> None:
        """Add native library vulnerabilities to the database."""
        
        # libjpeg-turbo Buffer Overflow (CVE-2020-17541)
        self.vulnerability_db["libjpeg_turbo_buffer_overflow"] = VulnerabilityDatabaseEntry(
            vulnerability_id="libjpeg_turbo_buffer_overflow",
            cve_id="CVE-2020-17541",
            title="libjpeg-turbo Buffer Overflow",
            description="Buffer overflow in libjpeg-turbo allows arbitrary code execution",
            severity=VulnerabilitySeverity.HIGH,
            affected_versions=["2.0.5", "2.0.4", "2.0.3", "2.0.2", "2.0.1", "2.0.0"],
            fixed_version="2.0.6",
            attack_vectors=[
                "Malicious JPEG processing",
                "Buffer overflow exploitation",
                "Arbitrary code execution"
            ],
            exploitability=ExploitabilityLevel.LOCAL,
            impact="Arbitrary code execution through malicious JPEG files",
            remediation="Update libjpeg-turbo to version 2.0.6 or later",
            references=[
                "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-17541"
            ],
            cvss_score=8.8,
            applicable_library_types={LibraryType.IMAGE_PROCESSING, LibraryType.NATIVE},
            detection_patterns=["libjpeg.*turbo.*2\\.0\\.[0-5]", "libjpeg-turbo", "libturbojpeg"]
        )
        
        # libpng Integer Overflow (CVE-2019-7317)
        self.vulnerability_db["libpng_integer_overflow"] = VulnerabilityDatabaseEntry(
            vulnerability_id="libpng_integer_overflow",
            cve_id="CVE-2019-7317",
            title="libpng Integer Overflow",
            description="Integer overflow in libpng can lead to memory corruption",
            severity=VulnerabilitySeverity.MEDIUM,
            affected_versions=["1.6.36", "1.6.35", "1.6.34"],
            fixed_version="1.6.37",
            attack_vectors=[
                "Malicious PNG processing",
                "Integer overflow exploitation",
                "Memory corruption"
            ],
            exploitability=ExploitabilityLevel.LOCAL,
            impact="Memory corruption through malicious PNG files",
            remediation="Update libpng to version 1.6.37 or later",
            references=[
                "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-7317"
            ],
            cvss_score=5.5,
            applicable_library_types={LibraryType.IMAGE_PROCESSING, LibraryType.NATIVE},
            detection_patterns=["libpng.*1\\.6\\.(34|35|36)", "libpng16"]
        )
    
    def _add_java_library_vulnerabilities(self) -> None:
        """Add Java library vulnerabilities to the database."""
        
        # Joda Time Parsing Vulnerability (CVE-2018-1000873)
        self.vulnerability_db["joda_time_parsing"] = VulnerabilityDatabaseEntry(
            vulnerability_id="joda_time_parsing",
            cve_id="CVE-2018-1000873",
            title="Joda Time Parsing Vulnerability",
            description="Joda Time contains a denial of service vulnerability in date parsing",
            severity=VulnerabilitySeverity.MEDIUM,
            affected_versions=["2.9.9", "2.9.8", "2.9.7", "2.9.6"],
            fixed_version="2.10.1",
            attack_vectors=[
                "Malicious date string parsing",
                "Regular expression DoS",
                "CPU exhaustion"
            ],
            exploitability=ExploitabilityLevel.REMOTE,
            impact="Denial of service through malicious date parsing",
            remediation="Update Joda Time to version 2.10.1 or later",
            references=[
                "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000873"
            ],
            cvss_score=5.3,
            applicable_library_types={LibraryType.UTILITY, LibraryType.JAVA},
            detection_patterns=["joda.*time.*2\\.9\\.[6-9]", "org\\.joda\\.time"]
        )
        
        # Jackson Databind RCE (CVE-2019-12384)
        self.vulnerability_db["jackson_databind_rce"] = VulnerabilityDatabaseEntry(
            vulnerability_id="jackson_databind_rce",
            cve_id="CVE-2019-12384",
            title="Jackson Databind Remote Code Execution",
            description="Jackson Databind contains remote code execution vulnerability through deserialization",
            severity=VulnerabilitySeverity.CRITICAL,
            affected_versions=["2.9.9", "2.9.8", "2.9.7"],
            fixed_version="2.9.9.1",
            attack_vectors=[
                "Malicious JSON deserialization",
                "Remote code execution",
                "Object injection"
            ],
            exploitability=ExploitabilityLevel.REMOTE,
            impact="Remote code execution through JSON deserialization",
            remediation="Update Jackson Databind to version 2.9.9.1 or later",
            references=[
                "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12384"
            ],
            cvss_score=9.8,
            applicable_library_types={LibraryType.UTILITY, LibraryType.JAVA},
            detection_patterns=["jackson.*databind.*2\\.9\\.[7-9]", "com\\.fasterxml\\.jackson"]
        )
    
    def get_vulnerability(self, vulnerability_id: str) -> Optional[VulnerabilityDatabaseEntry]:
        """Get vulnerability entry by ID."""
        return self.vulnerability_db.get(vulnerability_id)
    
    def get_vulnerabilities_by_cve(self, cve_id: str) -> List[VulnerabilityDatabaseEntry]:
        """Get vulnerabilities by CVE ID."""
        return [entry for entry in self.vulnerability_db.values() if entry.cve_id == cve_id]
    
    def get_vulnerabilities_by_library_type(self, library_type: LibraryType) -> List[VulnerabilityDatabaseEntry]:
        """Get vulnerabilities applicable to a specific library type."""
        return [
            entry for entry in self.vulnerability_db.values() 
            if library_type in entry.applicable_library_types
        ]
    
    def get_vulnerabilities_by_severity(self, severity: VulnerabilitySeverity) -> List[VulnerabilityDatabaseEntry]:
        """Get vulnerabilities by severity level."""
        return [entry for entry in self.vulnerability_db.values() if entry.severity == severity]
    
    def search_vulnerabilities(self, query: str) -> List[VulnerabilityDatabaseEntry]:
        """Search vulnerabilities by title or description."""
        query_lower = query.lower()
        results = []
        
        for entry in self.vulnerability_db.values():
            if (query_lower in entry.title.lower() or 
                query_lower in entry.description.lower() or
                query_lower in entry.cve_id.lower()):
                results.append(entry)
        
        return results
    
    def is_version_affected(self, vulnerability_id: str, version: str) -> bool:
        """Check if a specific version is affected by a vulnerability."""
        entry = self.get_vulnerability(vulnerability_id)
        if not entry:
            return False
        
        # Simple version comparison - can be enhanced with semantic versioning
        return version in entry.affected_versions
    
    def get_statistics(self) -> Dict[str, Any]:
        """Get vulnerability database statistics."""
        total_vulns = len(self.vulnerability_db)
        severity_counts = {}
        library_type_counts = {}
        
        for entry in self.vulnerability_db.values():
            # Count by severity
            severity = entry.severity.value
            severity_counts[severity] = severity_counts.get(severity, 0) + 1
            
            # Count by library types
            for lib_type in entry.applicable_library_types:
                type_name = lib_type.value
                library_type_counts[type_name] = library_type_counts.get(type_name, 0) + 1
        
        return {
            "total_vulnerabilities": total_vulns,
            "severity_distribution": severity_counts,
            "library_type_distribution": library_type_counts,
            "average_cvss_score": self._calculate_average_cvss(),
            "most_recent_cve": self._get_most_recent_cve()
        }
    
    def _calculate_average_cvss(self) -> float:
        """Calculate average CVSS score across all vulnerabilities."""
        scores = [entry.cvss_score for entry in self.vulnerability_db.values() if entry.cvss_score]
        return sum(scores) / len(scores) if scores else 0.0
    
    def _get_most_recent_cve(self) -> Optional[str]:
        """Get the most recently published CVE."""
        most_recent = None
        most_recent_date = None
        
        for entry in self.vulnerability_db.values():
            if entry.published_date:
                if not most_recent_date or entry.published_date > most_recent_date:
                    most_recent_date = entry.published_date
                    most_recent = entry.cve_id
        
        return most_recent

# Global vulnerability database instance
vulnerability_database = LibraryVulnerabilityDatabase() 