"""
Formatters for Library Vulnerability Scanner

This module provides comprehensive formatting and reporting capabilities
for library vulnerability analysis results using Rich text formatting.

Features:
- Rich text vulnerability reports
- Summary statistics and risk assessment
- Detailed vulnerability descriptions
- Remediation guidance formatting
- tabular output
"""

import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

from rich.console import Console
from rich.table import Table
from rich.text import Text
from rich.panel import Panel
from rich.progress import Progress
from rich.columns import Columns

from .data_structures import (
    LibraryAnalysisResult, LibraryInfo, LibraryVulnerability,
    VulnerabilitySeverity, DetectionMethod, LibraryType
)

logger = logging.getLogger(__name__)

class LibraryVulnerabilityFormatter:
    """Comprehensive formatter for library vulnerability analysis results."""
    
    def __init__(self):
        """Initialize the formatter."""
        self.console = Console()
        self.severity_styles = self._initialize_severity_styles()
        self.detection_method_styles = self._initialize_detection_method_styles()
    
    def _initialize_severity_styles(self) -> Dict[VulnerabilitySeverity, str]:
        """Initialize Rich text styles for vulnerability severities."""
        return {
            VulnerabilitySeverity.CRITICAL: "bold red",
            VulnerabilitySeverity.HIGH: "bold orange3",
            VulnerabilitySeverity.MEDIUM: "bold yellow",
            VulnerabilitySeverity.LOW: "bold blue",
            VulnerabilitySeverity.INFO: "bold cyan"
        }
    
    def _initialize_detection_method_styles(self) -> Dict[DetectionMethod, str]:
        """Initialize Rich text styles for detection methods."""
        return {
            DetectionMethod.GRADLE_ANALYSIS: "bold green",
            DetectionMethod.BINARY_ANALYSIS: "bold magenta",
            DetectionMethod.SOURCE_ANALYSIS: "bold blue",
            DetectionMethod.MANIFEST_ANALYSIS: "bold yellow",
            DetectionMethod.DEPENDENCY_ANALYSIS: "bold cyan"
        }
    
    def format_analysis_results(self, results: LibraryAnalysisResult) -> Text:
        """Format comprehensive analysis results with Rich text."""
        output = Text()
        
        # Header
        output.append("🔍 ", style="bold blue")
        output.append("Library Vulnerability Analysis Report\n", style="bold underline")
        output.append(f"Analysis ID: {results.analysis_id}\n", style="dim")
        output.append(f"Duration: {results.analysis_duration:.2f} seconds\n", style="dim")
        output.append(f"Completed: {results.end_time.strftime('%Y-%m-%d %H:%M:%S')}\n\n", style="dim")
        
        # Summary statistics
        output.append(self._format_summary_statistics(results))
        output.append("\n")
        
        # Risk assessment
        output.append(self._format_risk_assessment(results))
        output.append("\n")
        
        # Detected libraries
        if results.detected_libraries:
            output.append(self._format_detected_libraries(results.detected_libraries))
            output.append("\n")
        
        # Vulnerabilities
        if results.vulnerabilities:
            output.append(self._format_vulnerabilities(results.vulnerabilities))
            output.append("\n")
        
        # Recommendations
        if results.recommendations:
            output.append(self._format_recommendations(results.recommendations))
            output.append("\n")
        
        # Analysis quality metrics
        output.append(self._format_analysis_quality(results))
        
        return output
    
    def _format_summary_statistics(self, results: LibraryAnalysisResult) -> Text:
        """Format summary statistics section."""
        output = Text()
        output.append("📊 ", style="bold blue")
        output.append("Summary Statistics\n", style="bold underline")
        
        # Create summary table
        stats_table = Table(show_header=False, box=None, padding=(0, 2))
        stats_table.add_column("Metric", style="bold")
        stats_table.add_column("Value", style="cyan")
        
        stats_table.add_row("Libraries Detected", str(results.total_libraries))
        stats_table.add_row("Total Vulnerabilities", str(results.total_vulnerabilities))
        stats_table.add_row("Critical Vulnerabilities", 
                           f"[{self.severity_styles[VulnerabilitySeverity.CRITICAL]}]{results.critical_vulnerabilities}[/]")
        stats_table.add_row("High Vulnerabilities", 
                           f"[{self.severity_styles[VulnerabilitySeverity.HIGH]}]{results.high_vulnerabilities}[/]")
        stats_table.add_row("Medium Vulnerabilities", 
                           f"[{self.severity_styles[VulnerabilitySeverity.MEDIUM]}]{results.medium_vulnerabilities}[/]")
        stats_table.add_row("Low Vulnerabilities", 
                           f"[{self.severity_styles[VulnerabilitySeverity.LOW]}]{results.low_vulnerabilities}[/]")
        
        # Convert table to text (simplified for Text output)
        output.append(f"Libraries Detected: {results.total_libraries}\n", style="cyan")
        output.append(f"Total Vulnerabilities: {results.total_vulnerabilities}\n", style="cyan")
        output.append(f"Critical: ", style="bold")
        output.append(f"{results.critical_vulnerabilities}", style=self.severity_styles[VulnerabilitySeverity.CRITICAL])
        output.append(" | High: ", style="bold")
        output.append(f"{results.high_vulnerabilities}", style=self.severity_styles[VulnerabilitySeverity.HIGH])
        output.append(" | Medium: ", style="bold")
        output.append(f"{results.medium_vulnerabilities}", style=self.severity_styles[VulnerabilitySeverity.MEDIUM])
        output.append(" | Low: ", style="bold")
        output.append(f"{results.low_vulnerabilities}\n", style=self.severity_styles[VulnerabilitySeverity.LOW])
        
        return output
    
    def _format_risk_assessment(self, results: LibraryAnalysisResult) -> Text:
        """Format risk assessment section."""
        output = Text()
        output.append("⚠️  ", style="bold red")
        output.append("Risk Assessment\n", style="bold underline")
        
        # Risk level with appropriate styling
        risk_style = self._get_risk_level_style(results.risk_level)
        output.append(f"Overall Risk Level: ", style="bold")
        output.append(f"{results.risk_level}\n", style=risk_style)
        output.append(f"Risk Score: {results.overall_risk_score:.1f}/100\n", style="cyan")
        
        # Risk explanation
        risk_explanation = self._get_risk_explanation(results.overall_risk_score)
        output.append(f"Assessment: {risk_explanation}\n", style="dim")
        
        return output
    
    def _format_detected_libraries(self, libraries: List[LibraryInfo]) -> Text:
        """Format detected libraries section."""
        output = Text()
        output.append("📚 ", style="bold green")
        output.append("Detected Libraries\n", style="bold underline")
        
        for i, lib in enumerate(libraries, 1):
            output.append(f"{i}. ", style="bold")
            output.append(f"{lib.name} ", style="bold cyan")
            output.append(f"v{lib.version}\n", style="green")
            
            # Library details
            output.append(f"   Type: {lib.library_type.value.title()}\n", style="dim")
            output.append(f"   Location: {lib.location}\n", style="dim")
            output.append(f"   Detection: ", style="dim")
            output.append(f"{lib.detection_method.value}", 
                         style=self.detection_method_styles.get(lib.detection_method, "dim"))
            output.append(f" (confidence: {lib.confidence:.2f})\n", style="dim")
            
            if lib.vendor:
                output.append(f"   Vendor: {lib.vendor}\n", style="dim")
            
            if lib.known_vulnerabilities > 0:
                output.append(f"   ⚠️ Known Vulnerabilities: {lib.known_vulnerabilities}\n", 
                             style="bold red")
            
            output.append("\n")
        
        return output
    
    def _format_vulnerabilities(self, vulnerabilities: List[LibraryVulnerability]) -> Text:
        """Format vulnerabilities section."""
        output = Text()
        output.append("🚨 ", style="bold red")
        output.append("Vulnerability Details\n", style="bold underline")
        
        # Group vulnerabilities by severity
        grouped_vulns = self._group_vulnerabilities_by_severity(vulnerabilities)
        
        for severity in [VulnerabilitySeverity.CRITICAL, VulnerabilitySeverity.HIGH, 
                        VulnerabilitySeverity.MEDIUM, VulnerabilitySeverity.LOW]:
            if severity in grouped_vulns:
                output.append(self._format_severity_group(severity, grouped_vulns[severity]))
                output.append("\n")
        
        return output
    
    def _format_severity_group(self, severity: VulnerabilitySeverity, 
                              vulnerabilities: List[LibraryVulnerability]) -> Text:
        """Format a group of vulnerabilities by severity."""
        output = Text()
        
        # Severity header
        severity_icon = self._get_severity_icon(severity)
        output.append(f"{severity_icon} ", style=self.severity_styles[severity])
        output.append(f"{severity.value} Severity ({len(vulnerabilities)} found)\n", 
                     style=f"bold {self.severity_styles[severity]}")
        
        for i, vuln in enumerate(vulnerabilities, 1):
            output.append(f"  {i}. ", style="bold")
            output.append(f"{vuln.library_name} v{vuln.version} - ", style="cyan")
            output.append(f"{vuln.cve_id}\n", style="bold")
            
            # Vulnerability details
            output.append(f"     Description: {vuln.description}\n", style="dim")
            output.append(f"     Location: {vuln.location}\n", style="dim")
            output.append(f"     Confidence: {vuln.confidence:.2f}\n", style="dim")
            
            if vuln.attack_vectors:
                output.append(f"     Attack Vectors: {', '.join(vuln.attack_vectors)}\n", style="dim")
            
            if vuln.remediation:
                output.append(f"     🔧 Remediation: {vuln.remediation}\n", style="green")
            
            if vuln.references:
                output.append(f"     📖 References: {', '.join(vuln.references[:2])}\n", style="blue")
            
            output.append("\n")
        
        return output
    
    def _format_recommendations(self, recommendations: List[str]) -> Text:
        """Format recommendations section."""
        output = Text()
        output.append("💡 ", style="bold yellow")
        output.append("Recommendations\n", style="bold underline")
        
        for i, rec in enumerate(recommendations, 1):
            output.append(f"{i}. {rec}\n", style="yellow")
        
        return output
    
    def _format_analysis_quality(self, results: LibraryAnalysisResult) -> Text:
        """Format analysis quality metrics."""
        output = Text()
        output.append("📈 ", style="bold blue")
        output.append("Analysis Quality\n", style="bold underline")
        
        output.append(f"Coverage: {results.analysis_coverage:.1f}%\n", style="cyan")
        
        if results.confidence_distribution:
            output.append("Confidence Distribution:\n", style="bold")
            for conf_range, count in results.confidence_distribution.items():
                output.append(f"  {conf_range}: {count} findings\n", style="dim")
        
        if results.errors:
            output.append(f"Errors: {len(results.errors)}\n", style="red")
        
        if results.warnings:
            output.append(f"Warnings: {len(results.warnings)}\n", style="yellow")
        
        return output
    
    def create_summary_table(self, results: LibraryAnalysisResult) -> Table:
        """Create a Rich Table for summary display."""
        table = Table(title="Library Vulnerability Analysis Summary", 
                     show_header=True, header_style="bold magenta")
        
        table.add_column("Metric", style="cyan", no_wrap=True)
        table.add_column("Value", style="white")
        table.add_column("Details", style="dim")
        
        # Add summary rows
        table.add_row("Libraries", str(results.total_libraries), 
                     f"Analyzed {results.analysis_coverage:.1f}% of files")
        table.add_row("Vulnerabilities", str(results.total_vulnerabilities), 
                     f"Risk Level: {results.risk_level}")
        table.add_row("Critical", str(results.critical_vulnerabilities), 
                     "Immediate action required")
        table.add_row("High", str(results.high_vulnerabilities), 
                     "Priority remediation")
        table.add_row("Medium", str(results.medium_vulnerabilities), 
                     "Planned remediation")
        table.add_row("Low", str(results.low_vulnerabilities), 
                     "Monitor and update")
        
        return table
    
    def create_vulnerabilities_table(self, vulnerabilities: List[LibraryVulnerability]) -> Table:
        """Create a Rich Table for vulnerability display."""
        table = Table(title="Vulnerability Details", 
                     show_header=True, header_style="bold red")
        
        table.add_column("Library", style="cyan")
        table.add_column("Version", style="green")
        table.add_column("CVE", style="yellow")
        table.add_column("Severity", style="bold")
        table.add_column("Confidence", style="blue")
        table.add_column("Description", style="white", max_width=40)
        
        for vuln in vulnerabilities:
            severity_style = self.severity_styles[vuln.severity]
            table.add_row(
                vuln.library_name,
                vuln.version,
                vuln.cve_id,
                f"[{severity_style}]{vuln.severity.value}[/]",
                f"{vuln.confidence:.2f}",
                vuln.description[:80] + "..." if len(vuln.description) > 80 else vuln.description
            )
        
        return table
    
    def _group_vulnerabilities_by_severity(self, vulnerabilities: List[LibraryVulnerability]) -> Dict[VulnerabilitySeverity, List[LibraryVulnerability]]:
        """Group vulnerabilities by severity level."""
        grouped = {}
        for vuln in vulnerabilities:
            if vuln.severity not in grouped:
                grouped[vuln.severity] = []
            grouped[vuln.severity].append(vuln)
        
        # Sort vulnerabilities within each group by confidence (descending)
        for severity_vulns in grouped.values():
            severity_vulns.sort(key=lambda v: v.confidence, reverse=True)
        
        return grouped
    
    def _get_severity_icon(self, severity: VulnerabilitySeverity) -> str:
        """Get icon for severity level."""
        icons = {
            VulnerabilitySeverity.CRITICAL: "🔴",
            VulnerabilitySeverity.HIGH: "🟠",
            VulnerabilitySeverity.MEDIUM: "🟡",
            VulnerabilitySeverity.LOW: "🔵",
            VulnerabilitySeverity.INFO: "🟢"
        }
        return icons.get(severity, "⚪")
    
    def _get_risk_level_style(self, risk_level: str) -> str:
        """Get Rich style for risk level."""
        styles = {
            "CRITICAL": "bold red",
            "HIGH": "bold orange3",
            "MEDIUM": "bold yellow",
            "LOW": "bold blue",
            "MINIMAL": "bold green"
        }
        return styles.get(risk_level, "white")
    
    def _get_risk_explanation(self, risk_score: float) -> str:
        """Get risk explanation based on score."""
        if risk_score >= 80:
            return "Immediate security review and remediation required"
        elif risk_score >= 60:
            return "High priority security updates needed"
        elif risk_score >= 40:
            return "Moderate security improvements recommended"
        elif risk_score >= 20:
            return "Low priority security maintenance"
        else:
            return "Minimal security concerns identified"
    
    def generate_json_report(self, results: LibraryAnalysisResult) -> Dict[str, Any]:
        """Generate JSON report for programmatic consumption."""
        return {
            "analysis_metadata": {
                "analysis_id": results.analysis_id,
                "start_time": results.start_time.isoformat(),
                "end_time": results.end_time.isoformat(),
                "duration_seconds": results.analysis_duration,
                "coverage_percentage": results.analysis_coverage
            },
            "summary": {
                "total_libraries": results.total_libraries,
                "total_vulnerabilities": results.total_vulnerabilities,
                "vulnerability_counts": {
                    "critical": results.critical_vulnerabilities,
                    "high": results.high_vulnerabilities,
                    "medium": results.medium_vulnerabilities,
                    "low": results.low_vulnerabilities
                },
                "risk_assessment": {
                    "overall_score": results.overall_risk_score,
                    "risk_level": results.risk_level
                }
            },
            "detected_libraries": [
                {
                    "name": lib.name,
                    "version": lib.version,
                    "type": lib.library_type.value,
                    "vendor": lib.vendor,
                    "location": lib.location,
                    "detection_method": lib.detection_method.value,
                    "confidence": lib.confidence,
                    "security_score": lib.security_score,
                    "known_vulnerabilities": lib.known_vulnerabilities
                }
                for lib in results.detected_libraries
            ],
            "vulnerabilities": [
                {
                    "vulnerability_id": vuln.vulnerability_id,
                    "library_name": vuln.library_name,
                    "library_version": vuln.version,
                    "cve_id": vuln.cve_id,
                    "severity": vuln.severity.value,
                    "confidence": vuln.confidence,
                    "description": vuln.description,
                    "location": vuln.location,
                    "attack_vectors": vuln.attack_vectors,
                    "remediation": vuln.remediation,
                    "references": vuln.references,
                    "cvss_score": vuln.cvss_score,
                    "risk_score": vuln.risk_score,
                    "exploitability": vuln.exploitability.value if vuln.exploitability else None
                }
                for vuln in results.vulnerabilities
            ],
            "recommendations": results.recommendations,
            "analysis_quality": {
                "confidence_distribution": results.confidence_distribution,
                "errors": results.errors,
                "warnings": results.warnings
            }
        } 