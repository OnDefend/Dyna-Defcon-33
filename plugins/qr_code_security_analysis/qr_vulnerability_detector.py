"""
QR Code Vulnerability Detector

Analyzes static and dynamic findings to identify QR code security vulnerabilities.
Generates comprehensive vulnerability reports with evidence and recommendations.
"""

import logging
from typing import Dict, Any, List, Optional
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class QRVulnerabilityType(Enum):
    """Types of QR code vulnerabilities."""
    URL_INJECTION = "url_injection"
    INTENT_REDIRECTION = "intent_redirection" 
    DATA_PARSING_VULNERABILITY = "data_parsing_vulnerability"
    CAMERA_PERMISSION_ABUSE = "camera_permission_abuse"
    INPUT_VALIDATION_BYPASS = "input_validation_bypass"
    PHISHING_URL = "phishing_url"
    SENSITIVE_DATA_EXPOSURE = "sensitive_data_exposure"

class QRSeverityLevel(Enum):
    """Severity levels for QR vulnerabilities."""
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"
    INFO = "INFO"

@dataclass
class QRVulnerability:
    """Represents a QR code security vulnerability."""
    vuln_type: QRVulnerabilityType
    severity: QRSeverityLevel
    title: str
    description: str
    evidence: Dict[str, Any]
    confidence: float
    cwe_id: str
    masvs_control: str
    recommendations: List[str]
    affected_components: List[str]
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert vulnerability to dictionary format."""
        return {
            "type": self.vuln_type.value,
            "severity": self.severity.value,
            "title": self.title,
            "description": self.description,
            "evidence": self.evidence,
            "confidence": self.confidence,
            "cwe_id": self.cwe_id,
            "masvs_control": self.masvs_control,
            "recommendations": self.recommendations,
            "affected_components": self.affected_components
        }

class QRCodeVulnerabilityDetector:
    """Detector for QR code security vulnerabilities."""
    
    def __init__(self):
        """Initialize the vulnerability detector."""
        self.logger = logger
        
        # Vulnerability patterns and their characteristics
        self.vulnerability_patterns = {
            QRVulnerabilityType.URL_INJECTION: {
                "static_patterns": [
                    "loadUrl.*qr",
                    "javascript:.*qr",
                    "file://.*qr"
                ],
                "dynamic_indicators": ["javascript:", "file:", "data:", "vbscript:"],
                "severity": QRSeverityLevel.HIGH,
                "cwe_id": "CWE-79",
                "masvs_control": "MASVS-CODE-4"
            },
            QRVulnerabilityType.INTENT_REDIRECTION: {
                "static_patterns": [
                    "Intent.parseUri.*qr",
                    "startActivity.*qr"
                ],
                "dynamic_indicators": ["intent://", "#Intent", "content://settings"],
                "severity": QRSeverityLevel.MEDIUM,
                "cwe_id": "CWE-601",
                "masvs_control": "MASVS-PLATFORM-11"
            },
            QRVulnerabilityType.DATA_PARSING_VULNERABILITY: {
                "static_patterns": [
                    "JSON.parse.*qr",
                    "XML.*parse.*qr",
                    "Base64.*decode.*qr"
                ],
                "dynamic_indicators": ["malformed_data", "parsing_error"],
                "severity": QRSeverityLevel.MEDIUM,
                "cwe_id": "CWE-20",
                "masvs_control": "MASVS-CODE-4"
            },
            QRVulnerabilityType.CAMERA_PERMISSION_ABUSE: {
                "static_patterns": [
                    "Camera.open",
                    "camera.startPreview"
                ],
                "dynamic_indicators": ["camera_access_without_consent"],
                "severity": QRSeverityLevel.LOW,
                "cwe_id": "CWE-250",
                "masvs_control": "MASVS-PLATFORM-1"
            },
            QRVulnerabilityType.INPUT_VALIDATION_BYPASS: {
                "static_patterns": [
                    "qr.*substring",
                    "qr.*replace",
                    "new URL.*qr"
                ],
                "dynamic_indicators": ["unvalidated_input", "bypass_attempt"],
                "severity": QRSeverityLevel.MEDIUM,
                "cwe_id": "CWE-20",
                "masvs_control": "MASVS-CODE-4"
            }
        }
    
    def detect_qr_vulnerabilities(self, static_results: Dict[str, Any], 
                                  dynamic_results: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Detect QR code vulnerabilities from static and dynamic analysis results.
        
        Args:
            static_results: Results from static analysis
            dynamic_results: Results from dynamic analysis
            
        Returns:
            List of detected vulnerabilities
        """
        try:
            self.logger.info("Starting QR vulnerability detection")
            
            vulnerabilities = []
            
            # Analyze static findings
            static_vulns = self._analyze_static_findings(static_results)
            vulnerabilities.extend(static_vulns)
            
            # Analyze dynamic findings
            dynamic_vulns = self._analyze_dynamic_findings(dynamic_results)
            vulnerabilities.extend(dynamic_vulns)
            
            # Cross-reference static and dynamic findings
            correlated_vulns = self._correlate_findings(static_results, dynamic_results)
            vulnerabilities.extend(correlated_vulns)
            
            # Deduplicate and prioritize vulnerabilities
            final_vulnerabilities = self._deduplicate_vulnerabilities(vulnerabilities)
            
            self.logger.info(f"QR vulnerability detection completed: {len(final_vulnerabilities)} vulnerabilities found")
            return [v.to_dict() for v in final_vulnerabilities]
            
        except Exception as e:
            self.logger.error(f"QR vulnerability detection failed: {e}")
            return []
    
    def _analyze_static_findings(self, static_results: Dict[str, Any]) -> List[QRVulnerability]:
        """Analyze static analysis results for vulnerabilities."""
        vulnerabilities = []
        
        try:
            # Check for QR libraries without proper security measures
            libraries = static_results.get("libraries_detected", [])
            if libraries and not static_results.get("has_camera_permission", False):
                vulnerability = QRVulnerability(
                    vuln_type=QRVulnerabilityType.CAMERA_PERMISSION_ABUSE,
                    severity=QRSeverityLevel.MEDIUM,
                    title="QR Library Without Camera Permission",
                    description="QR code library detected without explicit camera permission - potential hidden scanning",
                    evidence={
                        "libraries": [lib.name if hasattr(lib, 'name') else str(lib) for lib in libraries],
                        "camera_permission": static_results.get("has_camera_permission", False)
                    },
                    confidence=0.7,
                    cwe_id="CWE-250",
                    masvs_control="MASVS-PLATFORM-1",
                    recommendations=[
                        "Ensure camera permission is explicitly requested when using QR libraries",
                        "Provide clear user consent for camera usage",
                        "Implement runtime permission checks"
                    ],
                    affected_components=["Camera", "QR Scanner"]
                )
                vulnerabilities.append(vulnerability)
            
            # Analyze vulnerability patterns from static code analysis
            patterns = static_results.get("vulnerability_patterns", [])
            for pattern in patterns:
                vuln_type = self._determine_vulnerability_type_from_pattern(pattern)
                if vuln_type:
                    vulnerability = self._create_vulnerability_from_pattern(pattern, vuln_type)
                    if vulnerability:
                        vulnerabilities.append(vulnerability)
            
            # Check for insecure QR implementation patterns
            if static_results.get("libraries_found", 0) > 0:
                security_assessment = static_results.get("security_assessment", {})
                if security_assessment.get("potential_vulnerabilities", 0) > 3:
                    vulnerability = QRVulnerability(
                        vuln_type=QRVulnerabilityType.INPUT_VALIDATION_BYPASS,
                        severity=QRSeverityLevel.MEDIUM,
                        title="Multiple QR Security Issues Detected",
                        description=f"High number of potential QR vulnerabilities detected: {security_assessment.get('potential_vulnerabilities', 0)}",
                        evidence={
                            "vulnerability_count": security_assessment.get("potential_vulnerabilities", 0),
                            "risk_factors": security_assessment.get("risk_factors", [])
                        },
                        confidence=0.6,
                        cwe_id="CWE-20",
                        masvs_control="MASVS-CODE-4",
                        recommendations=[
                            "Review QR code input validation mechanisms",
                            "Implement proper URL scheme filtering",
                            "Add content sanitization for QR data"
                        ],
                        affected_components=["QR Scanner", "Input Validation"]
                    )
                    vulnerabilities.append(vulnerability)
        
        except Exception as e:
            self.logger.error(f"Static findings analysis failed: {e}")
        
        return vulnerabilities
    
    def _analyze_dynamic_findings(self, dynamic_results: Dict[str, Any]) -> List[QRVulnerability]:
        """Analyze dynamic analysis results for vulnerabilities."""
        vulnerabilities = []
        
        try:
            # Analyze malicious QR detections
            malicious_qr = dynamic_results.get("malicious_qr_detected", [])
            for qr_detection in malicious_qr:
                vuln_type = self._determine_vulnerability_type_from_content(qr_detection.get("content", ""))
                severity = QRSeverityLevel.HIGH if qr_detection.get("risk_level") == "HIGH" else QRSeverityLevel.MEDIUM
                
                vulnerability = QRVulnerability(
                    vuln_type=vuln_type,
                    severity=severity,
                    title=f"Malicious QR Code Detected",
                    description=f"QR scanner processed malicious content: {qr_detection.get('detection_reason', 'Unknown')}",
                    evidence={
                        "qr_content": qr_detection.get("content", "")[:200],
                        "detection_reason": qr_detection.get("detection_reason", ""),
                        "library": qr_detection.get("library", ""),
                        "timestamp": qr_detection.get("timestamp", 0),
                        "risk_level": qr_detection.get("risk_level", "")
                    },
                    confidence=0.9,
                    cwe_id=self.vulnerability_patterns[vuln_type]["cwe_id"],
                    masvs_control=self.vulnerability_patterns[vuln_type]["masvs_control"],
                    recommendations=self._get_recommendations_for_type(vuln_type),
                    affected_components=["QR Scanner", qr_detection.get("library", "Unknown")]
                )
                vulnerabilities.append(vulnerability)
            
            # Analyze runtime vulnerability detections
            vuln_detections = dynamic_results.get("vulnerability_detections", [])
            for detection in vuln_detections:
                if detection.get("type") == "qr_code_vulnerability":
                    vuln_type_str = detection.get("subtype", "input_validation_bypass")
                    vuln_type = QRVulnerabilityType(vuln_type_str)
                    
                    vulnerability = QRVulnerability(
                        vuln_type=vuln_type,
                        severity=QRSeverityLevel(detection.get("severity", "MEDIUM")),
                        title=detection.get("title", "QR Code Vulnerability"),
                        description=detection.get("description", ""),
                        evidence=detection.get("evidence", {}),
                        confidence=0.8,
                        cwe_id=detection.get("cwe_id", "CWE-20"),
                        masvs_control=detection.get("masvs_control", "MASVS-CODE-4"),
                        recommendations=detection.get("recommendations", []),
                        affected_components=["QR Scanner"]
                    )
                    vulnerabilities.append(vulnerability)
        
        except Exception as e:
            self.logger.error(f"Dynamic findings analysis failed: {e}")
        
        return vulnerabilities
    
    def _correlate_findings(self, static_results: Dict[str, Any], 
                           dynamic_results: Dict[str, Any]) -> List[QRVulnerability]:
        """Correlate static and dynamic findings to identify complex vulnerabilities."""
        vulnerabilities = []
        
        try:
            # Check for QR libraries with runtime malicious content processing
            has_qr_libraries = static_results.get("libraries_found", 0) > 0
            has_malicious_runtime = len(dynamic_results.get("malicious_qr_detected", [])) > 0
            
            if has_qr_libraries and has_malicious_runtime:
                vulnerability = QRVulnerability(
                    vuln_type=QRVulnerabilityType.INPUT_VALIDATION_BYPASS,
                    severity=QRSeverityLevel.HIGH,
                    title="QR Input Validation Bypass Confirmed",
                    description="QR library implementation allows processing of malicious content without proper validation",
                    evidence={
                        "static_libraries": static_results.get("libraries_found", 0),
                        "runtime_malicious_events": len(dynamic_results.get("malicious_qr_detected", [])),
                        "correlation": "Static QR libraries + Runtime malicious processing"
                    },
                    confidence=0.95,
                    cwe_id="CWE-20",
                    masvs_control="MASVS-CODE-4",
                    recommendations=[
                        "Implement comprehensive input validation for QR content",
                        "Add URL scheme filtering before processing",
                        "Sanitize all QR data before use in application logic"
                    ],
                    affected_components=["QR Scanner", "Input Validation"]
                )
                vulnerabilities.append(vulnerability)
            
            # Check for camera permission with suspicious QR events
            has_camera_permission = static_results.get("has_camera_permission", False)
            qr_events = dynamic_results.get("qr_events", [])
            suspicious_events = [e for e in qr_events if e.get("risk_level") in ["HIGH", "MEDIUM"]]
            
            if has_camera_permission and suspicious_events:
                vulnerability = QRVulnerability(
                    vuln_type=QRVulnerabilityType.CAMERA_PERMISSION_ABUSE,
                    severity=QRSeverityLevel.MEDIUM,
                    title="Camera Permission with Malicious QR Processing",
                    description="Application has camera access and processes suspicious QR content",
                    evidence={
                        "camera_permission": has_camera_permission,
                        "suspicious_events": len(suspicious_events),
                        "event_types": list(set(e.get("type", "") for e in suspicious_events))
                    },
                    confidence=0.7,
                    cwe_id="CWE-250",
                    masvs_control="MASVS-PLATFORM-1",
                    recommendations=[
                        "Review camera usage consent mechanisms",
                        "Implement QR content filtering before processing",
                        "Add user warnings for suspicious QR content"
                    ],
                    affected_components=["Camera", "QR Scanner"]
                )
                vulnerabilities.append(vulnerability)
        
        except Exception as e:
            self.logger.error(f"Findings correlation failed: {e}")
        
        return vulnerabilities
    
    def _determine_vulnerability_type_from_pattern(self, pattern: Dict[str, Any]) -> Optional[QRVulnerabilityType]:
        """Determine vulnerability type from static pattern."""
        pattern_type = pattern.get("type", "")
        
        type_mapping = {
            "url_injection": QRVulnerabilityType.URL_INJECTION,
            "intent_injection": QRVulnerabilityType.INTENT_REDIRECTION,
            "input_validation_bypass": QRVulnerabilityType.INPUT_VALIDATION_BYPASS,
            "camera_permission_abuse": QRVulnerabilityType.CAMERA_PERMISSION_ABUSE
        }
        
        return type_mapping.get(pattern_type)
    
    def _determine_vulnerability_type_from_content(self, content: str) -> QRVulnerabilityType:
        """Determine vulnerability type from QR content."""
        content_lower = content.lower()
        
        if any(scheme in content_lower for scheme in ["javascript:", "file:", "data:", "vbscript:"]):
            return QRVulnerabilityType.URL_INJECTION
        elif "intent://" in content_lower and "#intent" in content_lower:
            return QRVulnerabilityType.INTENT_REDIRECTION
        elif any(indicator in content_lower for indicator in ["bit.ly", "tinyurl", "goo.gl"]):
            return QRVulnerabilityType.PHISHING_URL
        elif any(data in content_lower for data in ["password=", "token=", "api_key="]):
            return QRVulnerabilityType.SENSITIVE_DATA_EXPOSURE
        else:
            return QRVulnerabilityType.INPUT_VALIDATION_BYPASS
    
    def _create_vulnerability_from_pattern(self, pattern: Dict[str, Any], 
                                         vuln_type: QRVulnerabilityType) -> Optional[QRVulnerability]:
        """Create vulnerability from static pattern."""
        try:
            pattern_info = self.vulnerability_patterns[vuln_type]
            
            vulnerability = QRVulnerability(
                vuln_type=vuln_type,
                severity=pattern_info["severity"],
                title=f"QR {vuln_type.value.replace('_', ' ').title()} Detected",
                description=f"Static analysis detected {vuln_type.value} pattern in QR implementation",
                evidence={
                    "pattern": pattern.get("pattern", ""),
                    "file": pattern.get("file", ""),
                    "line": pattern.get("line", 0),
                    "match": pattern.get("match", "")
                },
                confidence=0.6,
                cwe_id=pattern_info["cwe_id"],
                masvs_control=pattern_info["masvs_control"],
                recommendations=self._get_recommendations_for_type(vuln_type),
                affected_components=["QR Scanner"]
            )
            
            return vulnerability
        
        except Exception as e:
            self.logger.error(f"Vulnerability creation from pattern failed: {e}")
            return None
    
    def _get_recommendations_for_type(self, vuln_type: QRVulnerabilityType) -> List[str]:
        """Get security recommendations for vulnerability type."""
        recommendations = {
            QRVulnerabilityType.URL_INJECTION: [
                "Implement URL scheme validation",
                "Sanitize QR content before processing",
                "Block dangerous URL schemes (javascript:, file:, data:)"
            ],
            QRVulnerabilityType.INTENT_REDIRECTION: [
                "Validate intent URIs before launching",
                "Use explicit intents instead of implicit ones",
                "Implement intent action allowlists"
            ],
            QRVulnerabilityType.DATA_PARSING_VULNERABILITY: [
                "Validate data format before parsing",
                "Use safe parsing libraries",
                "Implement content length limits"
            ],
            QRVulnerabilityType.CAMERA_PERMISSION_ABUSE: [
                "Request permissions only when needed",
                "Provide clear consent mechanisms",
                "Implement runtime permission checks"
            ],
            QRVulnerabilityType.INPUT_VALIDATION_BYPASS: [
                "Implement comprehensive input validation",
                "Use content filtering and sanitization",
                "Validate QR data structure before use"
            ]
        }
        
        return recommendations.get(vuln_type, [
            "Review QR code implementation for security issues",
            "Implement proper input validation",
            "Follow secure coding practices"
        ])
    
    def _deduplicate_vulnerabilities(self, vulnerabilities: List[QRVulnerability]) -> List[QRVulnerability]:
        """Remove duplicate vulnerabilities and prioritize by severity."""
        # Group by type and evidence similarity
        unique_vulns = {}
        
        for vuln in vulnerabilities:
            key = f"{vuln.vuln_type.value}_{vuln.title}_{str(vuln.evidence.get('file', ''))}"
            
            if key not in unique_vulns or vuln.confidence > unique_vulns[key].confidence:
                unique_vulns[key] = vuln
        
        # Sort by severity (CRITICAL > HIGH > MEDIUM > LOW > INFO)
        severity_order = {
            QRSeverityLevel.CRITICAL: 0,
            QRSeverityLevel.HIGH: 1,
            QRSeverityLevel.MEDIUM: 2,
            QRSeverityLevel.LOW: 3,
            QRSeverityLevel.INFO: 4
        }
        
        return sorted(unique_vulns.values(), key=lambda v: severity_order[v.severity])