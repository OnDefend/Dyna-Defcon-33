#!/usr/bin/env python3
"""
Component Exploitation Plugin - Data Structures

Core data structures, enums, and type definitions for component exploitation analysis.
Provides standardized data models for vulnerability findings, security assessments,
and exploitation command metadata.
"""

from dataclasses import dataclass, field
from enum import Enum
from typing import Dict, List, Any, Optional, Union
from datetime import datetime

class ComponentType(Enum):
    """Types of Android components that can be analyzed."""
    ACTIVITY = "activity"
    SERVICE = "service"
    RECEIVER = "receiver"
    PROVIDER = "provider"
    APPLICATION = "application"

class ExploitationRisk(Enum):
    """Risk levels for component exploitation."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    MINIMAL = "minimal"

class SecurityGrade(Enum):
    """Security grade classifications."""
    A_PLUS = "A+"
    A = "A"
    B = "B"
    C = "C"
    D = "D"
    F = "F"

class ThreatLevel(Enum):
    """Threat level classifications."""
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM"
    LOW = "LOW"
    MINIMAL = "MINIMAL"

class CommandSafety(Enum):
    """Safety levels for exploitation commands."""
    SAFE = "SAFE"
    CAUTION = "CAUTION"
    DANGEROUS = "DANGEROUS"

@dataclass
class ComponentInfo:
    """Information about an Android component for exploitation analysis."""
    name: str
    component_type: ComponentType
    exported: bool
    permissions: List[str] = field(default_factory=list)
    intent_filters: List[Dict[str, Any]] = field(default_factory=list)
    risk_level: ExploitationRisk = ExploitationRisk.LOW
    exploitable: bool = False
    vulnerabilities: List[str] = field(default_factory=list)
    exploitation_commands: List[str] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)

@dataclass
class ExploitationCommand:
    """Structured representation of an exploitation command."""
    id: str
    component_name: str
    component_type: ComponentType
    command: str
    risk_level: ExploitationRisk
    safety_level: CommandSafety
    description: str
    execution_notes: List[str] = field(default_factory=list)
    expected_outcome: str = ""
    prerequisites: List[str] = field(default_factory=list)
    metadata: Dict[str, Any] = field(default_factory=dict)

@dataclass
class SecurityAssessment:
    """Comprehensive security assessment results."""
    security_grade: SecurityGrade
    security_score: float
    grade_description: str
    threat_level: ThreatLevel
    total_components: int
    exploitable_components: int
    high_risk_components: int
    risk_distribution: Dict[str, int] = field(default_factory=dict)
    component_types: Dict[str, int] = field(default_factory=dict)
    recommendations: List[str] = field(default_factory=list)
    impact_assessment: str = ""
    mitigation_urgency: str = ""

@dataclass
class ComponentVulnerability:
    """Structured vulnerability finding for a component."""
    id: str
    title: str
    description: str
    severity: str
    component_name: str
    component_type: ComponentType
    risk_factors: List[str] = field(default_factory=list)
    impact: str = ""
    recommendation: str = ""
    owasp_category: str = ""
    cwe_id: str = ""
    cvss_score: float = 0.0
    confidence: float = 0.0
    evidence: Dict[str, Any] = field(default_factory=dict)
    references: List[str] = field(default_factory=list)

@dataclass
class AnalysisContext:
    """Context information for component exploitation analysis."""
    apk_package: str
    analysis_timestamp: datetime
    plugin_version: str
    total_components_analyzed: int
    analysis_duration: float = 0.0
    metadata: Dict[str, Any] = field(default_factory=dict)

@dataclass
class PluginResults:
    """Complete plugin analysis results."""
    plugin_metadata: Dict[str, Any]
    component_analysis: Dict[str, Any]
    exploitation_commands: List[ExploitationCommand]
    security_assessment: SecurityAssessment
    aods_findings: List[ComponentVulnerability]
    user_interface: Dict[str, Any]
    analysis_summary: Dict[str, Any]
    errors: List[str] = field(default_factory=list)

# Type aliases for better code readability
ComponentData = Dict[str, Any]
CommandData = Dict[str, Any]
FindingData = Dict[str, Any]
AssessmentData = Dict[str, Any]

# Constants for component exploitation analysis
DEFAULT_PERMISSIONS = [
    "android.permission.INTERNET",
    "android.permission.ACCESS_NETWORK_STATE",
    "android.permission.WRITE_EXTERNAL_STORAGE",
    "android.permission.READ_EXTERNAL_STORAGE"
]

DANGEROUS_PERMISSIONS = [
    "android.permission.READ_CONTACTS",
    "android.permission.WRITE_CONTACTS",
    "android.permission.READ_SMS",
    "android.permission.SEND_SMS",
    "android.permission.ACCESS_FINE_LOCATION",
    "android.permission.ACCESS_COARSE_LOCATION",
    "android.permission.RECORD_AUDIO",
    "android.permission.CAMERA",
    "android.permission.READ_PHONE_STATE",
    "android.permission.CALL_PHONE"
]

SEVERITY_MAPPING = {
    ExploitationRisk.CRITICAL: "CRITICAL",
    ExploitationRisk.HIGH: "HIGH",
    ExploitationRisk.MEDIUM: "MEDIUM",
    ExploitationRisk.LOW: "LOW",
    ExploitationRisk.MINIMAL: "INFO"
}

OWASP_CATEGORY_MAPPING = {
    ComponentType.ACTIVITY: "M2-Insecure Data Storage",
    ComponentType.SERVICE: "M10-Extraneous Functionality",
    ComponentType.RECEIVER: "M6-Insecure Authorization",
    ComponentType.PROVIDER: "M2-Insecure Data Storage"
}

CWE_MAPPING = {
    ComponentType.ACTIVITY: "CWE-200",  # Information Exposure
    ComponentType.SERVICE: "CWE-284",   # Improper Access Control
    ComponentType.RECEIVER: "CWE-306", # Missing Authentication
    ComponentType.PROVIDER: "CWE-200"  # Information Exposure
} 